digraph callgraph {
  "internal/reflectlite.init" -> "internal/goarch.init"
  "internal/unsafeheader.init" -> "unsafe.init"
  "internal/reflectlite.init" -> "internal/unsafeheader.init"
  "internal/reflectlite.init" -> "unsafe.init"
  "internal/reflectlite.init" -> "runtime.init"
  "errors.init" -> "internal/reflectlite.init"
  "internal/reflectlite.TypeOf" -> "internal/reflectlite.toType"
  "errors.init" -> "internal/reflectlite.TypeOf"
  "(*internal/reflectlite.rtype).Elem" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).Elem" -> "internal/reflectlite.toType"
  "(*internal/reflectlite.rtype).Elem" -> "internal/reflectlite.toType"
  "(*internal/reflectlite.rtype).Elem" -> "internal/reflectlite.toType"
  "(*internal/reflectlite.rtype).Elem" -> "internal/reflectlite.toType"
  "(*internal/reflectlite.rtype).Elem" -> "internal/reflectlite.toType"
  "errors.init" -> "(*internal/reflectlite.rtype).Elem"
  "bytes.init" -> "errors.init"
  "io.init" -> "errors.init"
  "sync/atomic.init" -> "unsafe.init"
  "sync.init" -> "sync/atomic.init"
  "sync.init" -> "unsafe.init"
  "internal/race.init" -> "unsafe.init"
  "sync.init" -> "internal/race.init"
  "sync.init" -> "runtime.init"
  "sync.init#1" -> "sync.runtime_registerPoolCleanup"
  "sync.init" -> "sync.init#1"
  "sync.init#2" -> "sync.runtime_notifyListCheck"
  "sync.init" -> "sync.init#2"
  "io.init" -> "sync.init"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "bytes.init" -> "io.init"
  "bytes.init" -> "unicode/utf8.init"
  "internal/bytealg.init" -> "internal/cpu.init"
  "internal/bytealg.init" -> "unsafe.init"
  "internal/bytealg.init" -> "internal/bytealg.init#1"
  "bytes.init" -> "internal/bytealg.init"
  "bytes.init" -> "unicode.init"
  "bytes.init" -> "errors.New"
  "bytes.init" -> "errors.New"
  "bytes.init" -> "errors.New"
  "(*runtime/pprof.protobuf).length" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).length" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).endMessage" -> "(*runtime/pprof.protobuf).length"
  "(*sync.Mutex).Lock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_canSpin"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_doSpin"
  "(*sync.Mutex).lockSlow" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).lockSlow" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).lockSlow" -> "sync.throw"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_nanotime"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_SemacquireMutex"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_nanotime"
  "(*sync.Mutex).lockSlow" -> "sync.throw"
  "(*sync.Mutex).lockSlow" -> "sync/atomic.AddInt32"
  "(*sync.Mutex).lockSlow" -> "internal/race.Acquire"
  "(*sync.Mutex).Lock" -> "(*sync.Mutex).lockSlow"
  "(*sync.Mutex).Lock" -> "internal/race.Acquire"
  "(*math/rand.lockedSource).Int63" -> "(*sync.Mutex).Lock"
  "(*math/rand.rngSource).Int63" -> "(*math/rand.rngSource).Uint64"
  "(*math/rand.lockedSource).Int63" -> "(*math/rand.rngSource).Int63"
  "(*sync.Mutex).Unlock" -> "internal/race.Release"
  "(*sync.Mutex).Unlock" -> "sync/atomic.AddInt32"
  "(*sync.Mutex).unlockSlow" -> "sync.fatal"
  "(*sync.Mutex).unlockSlow" -> "sync.runtime_Semrelease"
  "(*sync.Mutex).unlockSlow" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).unlockSlow" -> "sync.runtime_Semrelease"
  "(*sync.Mutex).Unlock" -> "(*sync.Mutex).unlockSlow"
  "(*math/rand.lockedSource).Int63" -> "(*sync.Mutex).Unlock"
  "(*math/rand.Rand).Int63" -> "(*math/rand.lockedSource).Int63"
  "(*math/rand.Rand).Int31" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).Int31n" -> "(*math/rand.Rand).Int31"
  "(*math/rand.Rand).Int31n" -> "(*math/rand.Rand).Int31"
  "(*math/rand.Rand).Int31n" -> "(*math/rand.Rand).Int31"
  "(*math/rand.Rand).Intn" -> "(*math/rand.Rand).Int31n"
  "(*math/rand.Rand).Int63n" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).Int63n" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).Int63n" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).Intn" -> "(*math/rand.Rand).Int63n"
  "math/rand.Intn" -> "(*math/rand.Rand).Intn"
  "command-line-arguments.randomString" -> "math/rand.Intn"
  "command-line-arguments.SimulationAlloc" -> "command-line-arguments.randomString"
  "(*text/tabwriter.Writer).updateWidth" -> "unicode/utf8.RuneCount"
  "(*text/tabwriter.Writer).endEscape" -> "(*text/tabwriter.Writer).updateWidth"
  "(*bytes.Buffer).WriteByte" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).tryGrowByReslice"
  "bytes.growSlice" -> "bytes.growSlice$1"
  "(*bytes.Buffer).grow" -> "bytes.growSlice"
  "(*bytes.Buffer).WriteByte" -> "(*bytes.Buffer).grow"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).WriteByte"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).grow"
  "(*bytes.Buffer).WriteRune" -> "unicode/utf8.EncodeRune"
  "syscall.setsockopt" -> "syscall.Syscall6"
  "syscall.setsockopt" -> "syscall.errnoErr"
  "syscall.SetsockoptByte" -> "syscall.setsockopt"
  "(*os.File).setWriteDeadline" -> "(*os.File).checkValid"
  "(time.Time).IsZero" -> "(*time.Time).sec"
  "(time.Time).IsZero" -> "(*time.Time).nsec"
  "internal/poll.setDeadlineImpl" -> "(time.Time).IsZero"
  "time.Until" -> "time.runtimeNano"
  "(time.Time).Sub" -> "(*time.Time).sec"
  "(time.Time).Sub" -> "(*time.Time).sec"
  "(time.Time).Sub" -> "(*time.Time).nsec"
  "(time.Time).Sub" -> "(*time.Time).nsec"
  "(time.Time).Add" -> "(*time.Time).nsec"
  "(*time.Time).stripMono" -> "(*time.Time).sec"
  "(*time.Time).addSec" -> "(*time.Time).stripMono"
  "(time.Time).Add" -> "(*time.Time).addSec"
  "(time.Time).Add" -> "(*time.Time).stripMono"
  "(time.Time).Sub" -> "(time.Time).Add"
  "(time.Time).Equal" -> "(*time.Time).sec"
  "(time.Time).Equal" -> "(*time.Time).sec"
  "(time.Time).Equal" -> "(*time.Time).nsec"
  "(time.Time).Equal" -> "(*time.Time).nsec"
  "(time.Time).Sub" -> "(time.Time).Equal"
  "(time.Time).Before" -> "(*time.Time).sec"
  "(time.Time).Before" -> "(*time.Time).sec"
  "(time.Time).Before" -> "(*time.Time).nsec"
  "(time.Time).Before" -> "(*time.Time).nsec"
  "(time.Time).Sub" -> "(time.Time).Before"
  "time.Until" -> "(time.Time).Sub"
  "time.Now" -> "time.now"
  "time.Until" -> "time.Now"
  "internal/poll.setDeadlineImpl" -> "time.Until"
  "(*internal/poll.fdMutex).incref" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).incref" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.FD).incref" -> "(*internal/poll.fdMutex).incref"
  "(*internal/poll.FD).incref" -> "internal/poll.errClosing"
  "internal/poll.setDeadlineImpl" -> "(*internal/poll.FD).incref"
  "(*internal/poll.fdMutex).decref" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).decref" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.FD).decref" -> "(*internal/poll.fdMutex).decref"
  "(*internal/poll.pollDesc).close" -> "internal/poll.runtime_pollClose"
  "(*internal/poll.FD).destroy" -> "(*internal/poll.pollDesc).close"
  "(*internal/poll.FD).destroy" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.FD).destroy" -> "syscall.Close"
  "(*internal/poll.FD).decref" -> "(*internal/poll.FD).destroy"
  "internal/poll.setDeadlineImpl" -> "(*internal/poll.FD).decref"
  "internal/poll.setDeadlineImpl" -> "internal/poll.runtime_pollSetDeadline"
  "(*internal/poll.FD).SetWriteDeadline" -> "internal/poll.setDeadlineImpl"
  "(*os.File).setWriteDeadline" -> "(*internal/poll.FD).SetWriteDeadline"
  "syscall.ByteSliceFromString" -> "internal/bytealg.IndexByteString"
  "syscall.BytePtrFromString" -> "syscall.ByteSliceFromString"
  "syscall.openat" -> "syscall.BytePtrFromString"
  "syscall.openat" -> "syscall.Syscall6"
  "syscall.openat" -> "syscall.errnoErr"
  "syscall.Open" -> "syscall.openat"
  "time.open" -> "syscall.Open"
  "time.loadTzinfoFromZip" -> "time.open"
  "time.closefd" -> "syscall.Close"
  "time.loadTzinfoFromZip" -> "time.closefd"
  "syscall.Seek" -> "syscall.Syscall"
  "syscall.Seek" -> "syscall.errnoErr"
  "time.preadn" -> "syscall.Seek"
  "syscall.read" -> "syscall.Syscall"
  "syscall.read" -> "syscall.errnoErr"
  "syscall.Read" -> "syscall.read"
  "syscall.Read" -> "internal/race.WriteRange"
  "syscall.Read" -> "internal/race.Acquire"
  "syscall.Read" -> "syscall.msanWrite"
  "syscall.Read" -> "syscall.asanWrite"
  "time.preadn" -> "syscall.Read"
  "time.preadn" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromDirOrZip" -> "time.loadTzinfoFromZip"
  "time.readFile" -> "time.open"
  "time.readFile" -> "time.closefd"
  "time.read" -> "syscall.Read"
  "time.readFile" -> "time.read"
  "time.loadTzinfoFromDirOrZip" -> "time.readFile"
  "time.loadTzinfo" -> "time.loadTzinfoFromDirOrZip"
  "time.loadLocation" -> "time.loadTzinfo"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "(*time.dataIO).big4" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).rest"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "(*time.dataIO).byte" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).byte"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).byte"
  "time.LoadLocationFromTZData" -> "time.byteString"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "(*time.dataIO).big8" -> "(*time.dataIO).big4"
  "(*time.dataIO).big8" -> "(*time.dataIO).big4"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big8"
  "time.LoadLocationFromTZData" -> "time.now"
  "time.tzset" -> "time.tzsetName"
  "time.tzsetOffset" -> "time.tzsetNum"
  "time.tzsetOffset" -> "time.tzsetNum"
  "time.tzsetOffset" -> "time.tzsetNum"
  "time.tzset" -> "time.tzsetOffset"
  "time.tzset" -> "time.tzsetName"
  "time.tzset" -> "time.tzsetOffset"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetOffset"
  "time.tzset" -> "time.tzsetRule"
  "time.tzset" -> "time.tzsetRule"
  "time.absDate" -> "time.isLeap"
  "time.tzset" -> "time.absDate"
  "time.tzset" -> "time.daysSinceEpoch"
  "time.tzruleTime" -> "time.isLeap"
  "time.daysIn" -> "time.isLeap"
  "time.tzruleTime" -> "time.daysIn"
  "time.tzruleTime" -> "time.isLeap"
  "time.tzset" -> "time.tzruleTime"
  "time.tzset" -> "time.tzruleTime"
  "time.LoadLocationFromTZData" -> "time.tzset"
  "time.LoadLocationFromTZData" -> "time.findZone"
  "time.loadLocation" -> "time.LoadLocationFromTZData"
  "time.loadLocation" -> "runtime.GOROOT"
  "time.loadLocation" -> "time.gorootZoneSource"
  "time.loadLocation" -> "time.LoadLocationFromTZData"
  "time.loadLocation" -> "time.loadTzinfo"
  "time.loadLocation" -> "time.LoadLocationFromTZData"
  "time.loadLocation" -> "errors.New"
  "(*io.multiReader).writeToWithBuffer" -> "(*io.multiReader).writeToWithBuffer"
  "(*os.File).Write" -> "(*os.File).checkValid"
  "(*internal/poll.fdMutex).rwlock" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).rwlock" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.fdMutex).rwlock" -> "internal/poll.runtime_Semacquire"
  "(*internal/poll.FD).writeLock" -> "(*internal/poll.fdMutex).rwlock"
  "(*internal/poll.FD).writeLock" -> "internal/poll.errClosing"
  "(*internal/poll.FD).Write" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.fdMutex).rwunlock" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).rwunlock" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.fdMutex).rwunlock" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.FD).writeUnlock" -> "(*internal/poll.fdMutex).rwunlock"
  "(*internal/poll.FD).writeUnlock" -> "(*internal/poll.FD).destroy"
  "(*internal/poll.FD).Write" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.pollDesc).prepare" -> "internal/poll.runtime_pollReset"
  "internal/poll.convertErr" -> "internal/poll.errClosing"
  "(*internal/poll.pollDesc).prepare" -> "internal/poll.convertErr"
  "(*internal/poll.pollDesc).prepareWrite" -> "(*internal/poll.pollDesc).prepare"
  "(*internal/poll.FD).Write" -> "(*internal/poll.pollDesc).prepareWrite"
  "internal/poll.ignoringEINTRIO" -> "syscall.Read"
  "syscall.Getdents" -> "syscall.Syscall"
  "syscall.Getdents" -> "syscall.errnoErr"
  "syscall.ReadDirent" -> "syscall.Getdents"
  "internal/poll.ignoringEINTRIO" -> "syscall.ReadDirent"
  "syscall.Write" -> "internal/race.ReleaseMerge"
  "syscall.Write" -> "syscall.faketimeWrite"
  "syscall.write" -> "syscall.Syscall"
  "syscall.write" -> "syscall.errnoErr"
  "syscall.Write" -> "syscall.write"
  "syscall.Write" -> "syscall.errnoErr"
  "syscall.Write" -> "internal/race.ReadRange"
  "syscall.Write" -> "syscall.msanRead"
  "syscall.Write" -> "syscall.asanRead"
  "internal/poll.ignoringEINTRIO" -> "syscall.Write"
  "(*internal/poll.FD).Write" -> "internal/poll.ignoringEINTRIO"
  "(*internal/poll.pollDesc).wait" -> "errors.New"
  "(*internal/poll.pollDesc).wait" -> "internal/poll.runtime_pollWait"
  "(*internal/poll.pollDesc).wait" -> "internal/poll.convertErr"
  "(*internal/poll.pollDesc).waitWrite" -> "(*internal/poll.pollDesc).wait"
  "(*internal/poll.FD).Write" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).Write" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).write" -> "(*internal/poll.FD).Write"
  "(*os.File).write" -> "runtime.KeepAlive"
  "(*os.File).Write" -> "(*os.File).write"
  "(*os.File).Write" -> "os.epipecheck"
  "(*os.File).Write" -> "(*os.File).wrapErr"
  "io.copyBuffer" -> "(*os.File).Write"
  "(*io.multiReader).writeToWithBuffer" -> "io.copyBuffer"
  "(*io.multiReader).WriteTo" -> "(*io.multiReader).writeToWithBuffer"
  "(*flag.FlagSet).Int64Var" -> "flag.newInt64Value"
  "(*flag.FlagSet).Var" -> "strings.HasPrefix"
  "(*sync.Pool).Get" -> "internal/race.Disable"
  "(*sync.Pool).pin" -> "sync.runtime_procPin"
  "(*sync.Pool).pin" -> "sync.runtime_LoadAcquintptr"
  "(*sync.Pool).pin" -> "sync.indexLocal"
  "(*sync.Pool).pinSlow" -> "sync.runtime_procUnpin"
  "(*sync.Pool).pinSlow" -> "(*sync.Mutex).Lock"
  "(*sync.Pool).pinSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Pool).pinSlow" -> "sync.runtime_procPin"
  "(*sync.Pool).pinSlow" -> "sync.indexLocal"
  "(*sync.Pool).pinSlow" -> "runtime.GOMAXPROCS"
  "(*sync.Pool).pinSlow" -> "sync/atomic.StorePointer"
  "(*sync.Pool).pinSlow" -> "sync.runtime_StoreReluintptr"
  "(*sync.Pool).pin" -> "(*sync.Pool).pinSlow"
  "(*sync.Pool).Get" -> "(*sync.Pool).pin"
  "(*sync.poolDequeue).popHead" -> "sync/atomic.LoadUint64"
  "(*sync.poolDequeue).popHead" -> "(*sync.poolDequeue).unpack"
  "(*sync.poolDequeue).popHead" -> "(*sync.poolDequeue).pack"
  "(*sync.poolDequeue).popHead" -> "sync/atomic.CompareAndSwapUint64"
  "(*sync.poolChain).popHead" -> "(*sync.poolDequeue).popHead"
  "sync.loadPoolChainElt" -> "sync/atomic.LoadPointer"
  "(*sync.poolChain).popHead" -> "sync.loadPoolChainElt"
  "(*sync.Pool).Get" -> "(*sync.poolChain).popHead"
  "(*sync.Pool).Get" -> "sync.runtime_procUnpin"
  "(*sync.Pool).getSlow" -> "sync.runtime_LoadAcquintptr"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.poolChain).popTail" -> "sync.loadPoolChainElt"
  "(*sync.poolChain).popTail" -> "sync.loadPoolChainElt"
  "(*sync.poolDequeue).popTail" -> "sync/atomic.LoadUint64"
  "(*sync.poolDequeue).popTail" -> "(*sync.poolDequeue).unpack"
  "(*sync.poolDequeue).popTail" -> "(*sync.poolDequeue).pack"
  "(*sync.poolDequeue).popTail" -> "sync/atomic.CompareAndSwapUint64"
  "(*sync.poolDequeue).popTail" -> "sync/atomic.StorePointer"
  "(*sync.poolChain).popTail" -> "(*sync.poolDequeue).popTail"
  "(*sync.poolChain).popTail" -> "sync/atomic.CompareAndSwapPointer"
  "sync.storePoolChainElt" -> "sync/atomic.StorePointer"
  "(*sync.poolChain).popTail" -> "sync.storePoolChainElt"
  "(*sync.Pool).getSlow" -> "(*sync.poolChain).popTail"
  "(*sync.Pool).getSlow" -> "sync/atomic.LoadUintptr"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.Pool).getSlow" -> "(*sync.poolChain).popTail"
  "(*sync.Pool).getSlow" -> "sync/atomic.StoreUintptr"
  "(*sync.Pool).Get" -> "(*sync.Pool).getSlow"
  "(*sync.Pool).Get" -> "internal/race.Enable"
  "(*sync.Pool).Get" -> "sync.poolRaceAddr"
  "(*sync.Pool).Get" -> "internal/race.Acquire"
  "(*sync.Pool).Get" -> "os.init$1"
  "(*sync.Pool).Get" -> "fmt.init$1"
  "(*sync.Pool).Get" -> "io.init$1"
  "fmt.newPrinter" -> "(*sync.Pool).Get"
  "(*fmt.fmt).init" -> "(*fmt.fmt).clearflags"
  "fmt.newPrinter" -> "(*fmt.fmt).init"
  "fmt.Sprintf" -> "fmt.newPrinter"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.fmt).clearflags"
  "fmt.parsenum" -> "fmt.tooLarge"
  "fmt.parseArgNumber" -> "fmt.parsenum"
  "(*fmt.pp).argNumber" -> "fmt.parseArgNumber"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).writeString"
  "(*fmt.fmt).padString" -> "unicode/utf8.RuneCountInString"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).writeString"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).writeString"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).writePadding"
  "(*fmt.pp).printArg" -> "(*fmt.fmt).padString"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.buffer).writeRune" -> "unicode/utf8.EncodeRune"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badVerb" -> "reflect.TypeOf"
  "(*fmt.pp).badVerb" -> "(*reflect.rtype).String"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).printArg"
  "(*fmt.pp).badVerb" -> "(reflect.Value).Type"
  "(*fmt.pp).badVerb" -> "(*reflect.rtype).String"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Interface"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).catchPanic" -> "reflect.ValueOf"
  "(*fmt.pp).catchPanic" -> "(reflect.Value).Kind"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(reflect.Value).IsNil"
  "(*fmt.pp).catchPanic" -> "(*fmt.fmt).clearflags"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.pp).printArg"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.fmt).fmtS" -> "(*fmt.fmt).truncateString"
  "(*fmt.fmt).fmtS" -> "(*fmt.fmt).padString"
  "(*fmt.pp).handleMethods" -> "(*fmt.fmt).fmtS"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtS"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).truncateString"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).padString"
  "strconv.CanBackquote" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.fmt).fmtQ" -> "strconv.CanBackquote"
  "strconv.appendQuotedWith" -> "unicode/utf8.DecodeRuneInString"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.IsPrint" -> "strconv.bsearch32"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.appendEscapedRune" -> "strconv.IsPrint"
  "strconv.appendEscapedRune" -> "strconv.IsPrint"
  "strconv.appendEscapedRune" -> "unicode/utf8.EncodeRune"
  "strconv.isInGraphicList" -> "strconv.bsearch16"
  "strconv.appendEscapedRune" -> "strconv.isInGraphicList"
  "strconv.appendEscapedRune" -> "unicode/utf8.ValidRune"
  "strconv.appendQuotedWith" -> "strconv.appendEscapedRune"
  "strconv.AppendQuoteToASCII" -> "strconv.appendQuotedWith"
  "(*fmt.fmt).fmtQ" -> "strconv.AppendQuoteToASCII"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).write"
  "(*fmt.fmt).pad" -> "unicode/utf8.RuneCount"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).write"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).write"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).pad"
  "strconv.AppendQuote" -> "strconv.appendQuotedWith"
  "(*fmt.fmt).fmtQ" -> "strconv.AppendQuote"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtQ"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtS"
  "(*fmt.fmt).fmtSbx" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtSbx" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtSbx" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtSx" -> "(*fmt.fmt).fmtSbx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtSx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtSx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtQ"
  "(*fmt.pp).fmtString" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).fmtString"
  "internal/itoa.Itoa" -> "internal/itoa.Uitoa"
  "internal/itoa.Itoa" -> "internal/itoa.Uitoa"
  "(syscall.Errno).Error" -> "internal/itoa.Itoa"
  "(*io/fs.PathError).Error" -> "(syscall.Errno).Error"
  "(*fmt.pp).handleMethods" -> "(*io/fs.PathError).Error"
  "(*internal/reflectlite.ValueError).Error" -> "(internal/reflectlite.Kind).String"
  "(*fmt.pp).handleMethods" -> "(*internal/reflectlite.ValueError).Error"
  "(*fmt.pp).handleMethods" -> "(*fmt.wrapError).Error"
  "strconv.quoteWith" -> "strconv.appendQuotedWith"
  "strconv.Quote" -> "strconv.quoteWith"
  "(*strconv.NumError).Error" -> "strconv.Quote"
  "(*strconv.NumError).Error" -> "(*errors.errorString).Error"
  "(*fmt.pp).handleMethods" -> "(*strconv.NumError).Error"
  "(*fmt.pp).handleMethods" -> "(*errors.errorString).Error"
  "(*fmt.pp).printValue" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).CanInterface"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printValue" -> "(reflect.Value).Bool"
  "(*fmt.fmt).fmtBoolean" -> "(*fmt.fmt).padString"
  "(*fmt.fmt).fmtBoolean" -> "(*fmt.fmt).padString"
  "(*fmt.pp).fmtBool" -> "(*fmt.fmt).fmtBoolean"
  "(*fmt.pp).fmtBool" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtBool"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(reflect.Value).Int"
  "(*fmt.fmt).fmtInteger" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtInteger" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmt0x64" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.fmt).fmtC" -> "unicode/utf8.EncodeRune"
  "(*fmt.fmt).fmtC" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtC"
  "strconv.appendQuotedRuneWith" -> "unicode/utf8.ValidRune"
  "strconv.appendQuotedRuneWith" -> "strconv.appendEscapedRune"
  "strconv.AppendQuoteRuneToASCII" -> "strconv.appendQuotedRuneWith"
  "(*fmt.fmt).fmtQc" -> "strconv.AppendQuoteRuneToASCII"
  "(*fmt.fmt).fmtQc" -> "(*fmt.fmt).pad"
  "strconv.AppendQuoteRune" -> "strconv.appendQuotedRuneWith"
  "(*fmt.fmt).fmtQc" -> "strconv.AppendQuoteRune"
  "(*fmt.fmt).fmtQc" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtQc"
  "(*fmt.fmt).fmtUnicode" -> "unicode/utf8.RuneLen"
  "(*fmt.fmt).fmtUnicode" -> "unicode/utf8.EncodeRune"
  "(*fmt.fmt).fmtUnicode" -> "strconv.IsPrint"
  "(*fmt.fmt).fmtUnicode" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtUnicode"
  "(*fmt.pp).fmtInteger" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printValue" -> "(reflect.Value).Uint"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printValue" -> "(reflect.Value).Float"
  "strconv.genericFtoa" -> "math.Float32bits"
  "strconv.genericFtoa" -> "math.Float64bits"
  "strconv.formatBits" -> "strconv.isPowerOfTwo"
  "math/bits.TrailingZeros" -> "math/bits.TrailingZeros32"
  "math/bits.TrailingZeros" -> "math/bits.TrailingZeros64"
  "strconv.formatBits" -> "math/bits.TrailingZeros"
  "strconv.fmtB" -> "strconv.formatBits"
  "strconv.fmtB" -> "strconv.formatBits"
  "strconv.genericFtoa" -> "strconv.fmtB"
  "strconv.fmtX" -> "strconv.lower"
  "strconv.genericFtoa" -> "strconv.fmtX"
  "(*strconv.decimal).Assign" -> "strconv.trim"
  "strconv.bigFtoa" -> "(*strconv.decimal).Assign"
  "strconv.leftShift" -> "strconv.prefixIsLessThan"
  "strconv.leftShift" -> "strconv.trim"
  "(*strconv.decimal).Shift" -> "strconv.leftShift"
  "(*strconv.decimal).Shift" -> "strconv.leftShift"
  "strconv.rightShift" -> "strconv.trim"
  "(*strconv.decimal).Shift" -> "strconv.rightShift"
  "(*strconv.decimal).Shift" -> "strconv.rightShift"
  "strconv.bigFtoa" -> "(*strconv.decimal).Shift"
  "strconv.roundShortest" -> "(*strconv.decimal).Assign"
  "strconv.roundShortest" -> "(*strconv.decimal).Shift"
  "strconv.roundShortest" -> "(*strconv.decimal).Assign"
  "strconv.roundShortest" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).Round" -> "strconv.shouldRoundUp"
  "(*strconv.decimal).Round" -> "(*strconv.decimal).RoundUp"
  "(*strconv.decimal).RoundDown" -> "strconv.trim"
  "(*strconv.decimal).Round" -> "(*strconv.decimal).RoundDown"
  "strconv.roundShortest" -> "(*strconv.decimal).Round"
  "strconv.roundShortest" -> "(*strconv.decimal).RoundDown"
  "strconv.roundShortest" -> "(*strconv.decimal).RoundUp"
  "strconv.bigFtoa" -> "strconv.roundShortest"
  "strconv.fmtE" -> "strconv.min"
  "strconv.formatDigits" -> "strconv.fmtE"
  "strconv.fmtF" -> "strconv.min"
  "strconv.formatDigits" -> "strconv.fmtF"
  "strconv.formatDigits" -> "strconv.fmtE"
  "strconv.formatDigits" -> "strconv.max"
  "strconv.formatDigits" -> "strconv.fmtF"
  "strconv.bigFtoa" -> "strconv.formatDigits"
  "strconv.bigFtoa" -> "strconv.max"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.divmod1e9" -> "math/bits.Mul64"
  "strconv.ryuDigits" -> "strconv.divmod1e9"
  "strconv.ryuDigits" -> "strconv.divmod1e9"
  "strconv.ryuDigits" -> "strconv.divmod1e9"
  "strconv.ryuDigits" -> "strconv.ryuDigits32"
  "strconv.ryuDigits" -> "strconv.ryuDigits32"
  "strconv.ryuDigits" -> "strconv.ryuDigits32"
  "strconv.ryuFtoaShortest" -> "strconv.ryuDigits"
  "strconv.ryuFtoaShortest" -> "strconv.computeBounds"
  "strconv.ryuFtoaShortest" -> "math/bits.TrailingZeros64"
  "strconv.ryuFtoaShortest" -> "strconv.ryuDigits"
  "strconv.ryuFtoaShortest" -> "strconv.mulByLog2Log10"
  "strconv.mult64bitPow10" -> "math/bits.Mul64"
  "strconv.mult64bitPow10" -> "strconv.mulByLog10Log2"
  "strconv.ryuFtoaShortest" -> "strconv.mult64bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult64bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult64bitPow10"
  "strconv.mult128bitPow10" -> "strconv.mulByLog10Log2"
  "strconv.mult128bitPow10" -> "math/bits.Mul64"
  "strconv.mult128bitPow10" -> "math/bits.Mul64"
  "strconv.mult128bitPow10" -> "math/bits.Add64"
  "strconv.ryuFtoaShortest" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaShortest" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaShortest" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaShortest" -> "strconv.ryuDigits"
  "strconv.genericFtoa" -> "strconv.ryuFtoaShortest"
  "strconv.genericFtoa" -> "strconv.max"
  "strconv.genericFtoa" -> "strconv.max"
  "strconv.ryuFtoaFixed32" -> "math/bits.Len32"
  "strconv.ryuFtoaFixed32" -> "strconv.mulByLog2Log10"
  "strconv.ryuFtoaFixed32" -> "strconv.mult64bitPow10"
  "strconv.ryuFtoaFixed32" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaFixed32" -> "strconv.formatDecimal"
  "strconv.genericFtoa" -> "strconv.ryuFtoaFixed32"
  "strconv.ryuFtoaFixed64" -> "math/bits.Len64"
  "strconv.ryuFtoaFixed64" -> "strconv.mulByLog2Log10"
  "strconv.ryuFtoaFixed64" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaFixed64" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaFixed64" -> "strconv.formatDecimal"
  "strconv.genericFtoa" -> "strconv.ryuFtoaFixed64"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.genericFtoa" -> "strconv.formatDigits"
  "strconv.AppendFloat" -> "strconv.genericFtoa"
  "(*fmt.fmt).fmtFloat" -> "strconv.AppendFloat"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.buffer).writeByte"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.buffer).write"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printValue" -> "(reflect.Value).Float"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printValue" -> "(reflect.Value).Complex"
  "(*fmt.pp).fmtComplex" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtComplex" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).fmtComplex" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).fmtComplex" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtComplex" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printValue" -> "(reflect.Value).Complex"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printValue" -> "(reflect.Value).String"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsNil"
  "internal/fmtsort.Sort" -> "(reflect.Value).Type"
  "internal/fmtsort.Sort" -> "(*reflect.rtype).Kind"
  "internal/fmtsort.Sort" -> "(reflect.Value).Len"
  "internal/fmtsort.Sort" -> "(reflect.Value).MapRange"
  "internal/fmtsort.Sort" -> "(*reflect.MapIter).Key"
  "internal/fmtsort.Sort" -> "(*reflect.MapIter).Value"
  "sort.insertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.insertionSort" -> "(sort.Float64Slice).Swap"
  "sort.insertionSort" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.insertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.insertionSort" -> "(sort.IntSlice).Swap"
  "sort.insertionSort" -> "(sort.StringSlice).Swap"
  "sort.insertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.insertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "(sort.Float64Slice).Less" -> "sort.isNaN"
  "(sort.Float64Slice).Less" -> "sort.isNaN"
  "sort.insertionSort" -> "(sort.Float64Slice).Less"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "(reflect.Value).Kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Int"
  "internal/fmtsort.compare" -> "(reflect.Value).Int"
  "internal/fmtsort.compare" -> "(reflect.Value).Uint"
  "internal/fmtsort.compare" -> "(reflect.Value).Uint"
  "internal/fmtsort.compare" -> "(reflect.Value).String"
  "internal/fmtsort.compare" -> "(reflect.Value).String"
  "internal/fmtsort.compare" -> "(reflect.Value).Float"
  "internal/fmtsort.compare" -> "(reflect.Value).Float"
  "internal/fmtsort.floatCompare" -> "internal/fmtsort.isNaN"
  "internal/fmtsort.floatCompare" -> "internal/fmtsort.isNaN"
  "internal/fmtsort.compare" -> "internal/fmtsort.floatCompare"
  "internal/fmtsort.compare" -> "(reflect.Value).Complex"
  "internal/fmtsort.compare" -> "(reflect.Value).Complex"
  "internal/fmtsort.compare" -> "internal/fmtsort.floatCompare"
  "internal/fmtsort.compare" -> "(reflect.Value).Bool"
  "internal/fmtsort.compare" -> "(reflect.Value).Bool"
  "internal/fmtsort.compare" -> "internal/fmtsort.floatCompare"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.nilCompare" -> "(reflect.Value).IsNil"
  "internal/fmtsort.nilCompare" -> "(reflect.Value).IsNil"
  "internal/fmtsort.nilCompare" -> "(reflect.Value).IsNil"
  "internal/fmtsort.compare" -> "internal/fmtsort.nilCompare"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.compare" -> "(reflect.Value).Field"
  "internal/fmtsort.compare" -> "(reflect.Value).Field"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "internal/fmtsort.compare" -> "(reflect.Value).NumField"
  "internal/fmtsort.compare" -> "internal/fmtsort.nilCompare"
  "internal/fmtsort.compare" -> "(reflect.Value).Index"
  "internal/fmtsort.compare" -> "(reflect.Value).Index"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "internal/fmtsort.compare" -> "(reflect.Value).Len"
  "internal/fmtsort.compare" -> "(*reflect.rtype).String"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "reflect.ValueOf"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "reflect.ValueOf"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "(*internal/fmtsort.SortedMap).Less" -> "internal/fmtsort.compare"
  "sort.insertionSort" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.insertionSort" -> "(compress/flate.byFreq).Less"
  "sort.insertionSort" -> "(sort.IntSlice).Less"
  "sort.insertionSort" -> "(sort.StringSlice).Less"
  "sort.insertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.stable" -> "sort.insertionSort"
  "sort.stable" -> "sort.insertionSort"
  "sort.swapRange" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.rotate" -> "sort.swapRange"
  "sort.rotate" -> "sort.swapRange"
  "sort.rotate" -> "sort.swapRange"
  "sort.symMerge" -> "sort.rotate"
  "sort.symMerge" -> "sort.symMerge"
  "sort.symMerge" -> "sort.symMerge"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.stable" -> "sort.symMerge"
  "sort.stable" -> "sort.symMerge"
  "sort.Stable" -> "sort.stable"
  "sort.Stable" -> "(*internal/fmtsort.SortedMap).Len"
  "internal/fmtsort.Sort" -> "sort.Stable"
  "internal/fmtsort.Sort" -> "(*reflect.MapIter).Next"
  "(*fmt.pp).printValue" -> "internal/fmtsort.Sort"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Elem"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).NumField"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).Field"
  "fmt.getField" -> "(reflect.Value).Field"
  "fmt.getField" -> "(reflect.Value).Kind"
  "fmt.getField" -> "(reflect.Value).Elem"
  "fmt.getField" -> "(reflect.Value).IsNil"
  "(*fmt.pp).printValue" -> "fmt.getField"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).Elem"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).Bytes"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.fmt).truncate" -> "unicode/utf8.DecodeRune"
  "(*fmt.fmt).fmtBs" -> "(*fmt.fmt).truncate"
  "(*fmt.fmt).fmtBs" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtBs"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.fmt).fmtBx" -> "(*fmt.fmt).fmtSbx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtBx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtBx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtQ"
  "(*fmt.pp).fmtBytes" -> "reflect.ValueOf"
  "(*fmt.pp).fmtBytes" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtBytes"
  "(*fmt.pp).printValue" -> "(reflect.Value).CanAddr"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(reflect.Value).Slice"
  "(*fmt.pp).printValue" -> "(reflect.Value).Bytes"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printValue" -> "(reflect.Value).Uint"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsNil"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Kind"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Pointer"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Type"
  "(*fmt.pp).fmtPointer" -> "(*reflect.rtype).String"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.fmt).padString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printValue" -> "(reflect.Value).Elem"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).Pointer"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).unknownType" -> "(reflect.Value).IsValid"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).unknownType" -> "(reflect.Value).Type"
  "(*fmt.pp).unknownType" -> "(*reflect.rtype).String"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).unknownType"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).printValue"
  "(*fmt.pp).badVerb" -> "(reflect.Value).IsValid"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printArg" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printArg" -> "reflect.TypeOf"
  "(*fmt.pp).printArg" -> "(*reflect.rtype).String"
  "(*fmt.pp).printArg" -> "(*fmt.fmt).fmtS"
  "(*fmt.pp).printArg" -> "reflect.ValueOf"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtBool"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtBytes"
  "(*fmt.pp).printArg" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printArg" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printArg" -> "(reflect.Value).Interface"
  "(*fmt.pp).printArg" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printArg" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printArg" -> "(reflect.Value).CanInterface"
  "(*fmt.pp).printArg" -> "reflect.ValueOf"
  "(*fmt.pp).printArg" -> "(*fmt.pp).printValue"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "fmt.intFromArg" -> "reflect.ValueOf"
  "fmt.intFromArg" -> "(reflect.Value).Kind"
  "fmt.intFromArg" -> "fmt.tooLarge"
  "fmt.intFromArg" -> "(reflect.Value).Int"
  "fmt.intFromArg" -> "(reflect.Value).Uint"
  "(*fmt.pp).doPrintf" -> "fmt.intFromArg"
  "(*fmt.pp).doPrintf" -> "fmt.parsenum"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "fmt.intFromArg"
  "(*fmt.pp).doPrintf" -> "fmt.parsenum"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badArgNum" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).badArgNum" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).badArgNum" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).badArgNum"
  "(*fmt.pp).missingArg" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).missingArg" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).missingArg" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).missingArg"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "(*fmt.pp).doPrintf" -> "(*fmt.fmt).clearflags"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "reflect.TypeOf"
  "(*fmt.pp).doPrintf" -> "(*reflect.rtype).String"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "fmt.Sprintf" -> "(*fmt.pp).doPrintf"
  "(*sync.Pool).Put" -> "sync.fastrandn"
  "(*sync.Pool).Put" -> "(*sync.Pool).pin"
  "(*sync.Pool).Put" -> "sync.poolRaceAddr"
  "(*sync.Pool).Put" -> "internal/race.ReleaseMerge"
  "(*sync.Pool).Put" -> "internal/race.Disable"
  "(*sync.Pool).Put" -> "sync.runtime_procUnpin"
  "(*sync.poolChain).pushHead" -> "sync.storePoolChainElt"
  "(*sync.poolDequeue).pushHead" -> "sync/atomic.LoadUint64"
  "(*sync.poolDequeue).pushHead" -> "(*sync.poolDequeue).unpack"
  "(*sync.poolDequeue).pushHead" -> "sync/atomic.LoadPointer"
  "(*sync.poolDequeue).pushHead" -> "sync/atomic.AddUint64"
  "(*sync.poolChain).pushHead" -> "(*sync.poolDequeue).pushHead"
  "(*sync.poolChain).pushHead" -> "sync.storePoolChainElt"
  "(*sync.poolChain).pushHead" -> "(*sync.poolDequeue).pushHead"
  "(*sync.Pool).Put" -> "(*sync.poolChain).pushHead"
  "(*sync.Pool).Put" -> "internal/race.Enable"
  "(*fmt.pp).free" -> "(*sync.Pool).Put"
  "fmt.Sprintf" -> "(*fmt.pp).free"
  "(*flag.FlagSet).sprintf" -> "fmt.Sprintf"
  "(*flag.FlagSet).sprintf" -> "(*flag.FlagSet).Output"
  "fmt.Fprintln" -> "fmt.newPrinter"
  "(*fmt.pp).doPrintln" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintln" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintln" -> "(*fmt.pp).printArg"
  "fmt.Fprintln" -> "(*fmt.pp).doPrintln"
  "fmt.Fprintln" -> "(*fmt.pp).free"
  "fmt.Fprintln" -> "(*os.File).Write"
  "(*flag.FlagSet).sprintf" -> "fmt.Fprintln"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "strings.Index" -> "strings.IndexByte"
  "strings.Index" -> "internal/bytealg.IndexString"
  "strings.Index" -> "strings.IndexByte"
  "strings.Index" -> "internal/bytealg.Cutover"
  "strings.Index" -> "internal/bytealg.IndexString"
  "strings.Index" -> "strings.IndexByte"
  "internal/bytealg.IndexRabinKarp" -> "internal/bytealg.HashStr"
  "strings.Index" -> "internal/bytealg.IndexRabinKarp"
  "strings.Contains" -> "strings.Index"
  "(*flag.FlagSet).Var" -> "strings.Contains"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "strconv.FormatUint" -> "strconv.small"
  "strconv.FormatUint" -> "strconv.formatBits"
  "(*flag.uintValue).String" -> "strconv.FormatUint"
  "(*flag.FlagSet).Var" -> "(*flag.uintValue).String"
  "(*flag.FlagSet).Var" -> "(flag.funcValue).String"
  "strconv.FormatFloat" -> "strconv.max"
  "strconv.FormatFloat" -> "strconv.genericFtoa"
  "(*flag.float64Value).String" -> "strconv.FormatFloat"
  "(*flag.FlagSet).Var" -> "(*flag.float64Value).String"
  "strconv.FormatInt" -> "strconv.small"
  "strconv.FormatInt" -> "strconv.formatBits"
  "(*flag.int64Value).String" -> "strconv.FormatInt"
  "(*flag.FlagSet).Var" -> "(*flag.int64Value).String"
  "(*flag.FlagSet).Var" -> "(*flag.stringValue).String"
  "(time.Duration).String" -> "time.fmtFrac"
  "(time.Duration).String" -> "time.fmtInt"
  "(time.Duration).String" -> "time.fmtFrac"
  "(time.Duration).String" -> "time.fmtInt"
  "(time.Duration).String" -> "time.fmtInt"
  "(time.Duration).String" -> "time.fmtInt"
  "(*flag.durationValue).String" -> "(time.Duration).String"
  "(*flag.FlagSet).Var" -> "(*flag.durationValue).String"
  "(*flag.boolValue).String" -> "strconv.FormatBool"
  "(*flag.FlagSet).Var" -> "(*flag.boolValue).String"
  "(*flag.FlagSet).Var" -> "(flag.textValue).String"
  "(*flag.uint64Value).String" -> "strconv.FormatUint"
  "(*flag.FlagSet).Var" -> "(*flag.uint64Value).String"
  "strconv.Itoa" -> "strconv.FormatInt"
  "(*flag.intValue).String" -> "strconv.Itoa"
  "(*flag.FlagSet).Var" -> "(*flag.intValue).String"
  "(*flag.FlagSet).Int64Var" -> "(*flag.FlagSet).Var"
  "(*flag.FlagSet).Int64" -> "(*flag.FlagSet).Int64Var"
  "compress/flate.init" -> "errors.init"
  "fmt.init" -> "errors.init"
  "math.init" -> "internal/cpu.init"
  "math/bits.init" -> "unsafe.init"
  "math.init" -> "math/bits.init"
  "math.init" -> "unsafe.init"
  "strconv.init" -> "math.init"
  "strconv.init" -> "errors.init"
  "strconv.init" -> "internal/bytealg.init"
  "strconv.init" -> "math/bits.init"
  "strconv.init" -> "unicode/utf8.init"
  "strconv.init" -> "errors.New"
  "strconv.init" -> "errors.New"
  "fmt.init" -> "strconv.init"
  "fmt.init" -> "unicode/utf8.init"
  "internal/fmtsort.init" -> "reflect.init"
  "sort.init" -> "math/bits.init"
  "sort.init" -> "internal/reflectlite.init"
  "internal/fmtsort.init" -> "sort.init"
  "fmt.init" -> "internal/fmtsort.init"
  "fmt.init" -> "io.init"
  "internal/oserror.init" -> "errors.init"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "io/fs.init" -> "internal/oserror.init"
  "time.init" -> "errors.init"
  "syscall.init" -> "unsafe.init"
  "syscall.init" -> "runtime.init"
  "syscall.init" -> "sync.init"
  "syscall.init" -> "internal/itoa.init"
  "syscall.init" -> "errors.init"
  "syscall.init" -> "internal/bytealg.init"
  "syscall.init" -> "internal/oserror.init"
  "syscall.init" -> "internal/race.init"
  "syscall.init" -> "internal/unsafeheader.init"
  "syscall.init" -> "syscall.runtime_envs"
  "time.init" -> "syscall.init"
  "time.init" -> "unsafe.init"
  "time.init" -> "sync.init"
  "time.init" -> "runtime.init"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "time.init" -> "time.runtimeNano"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "io/fs.init" -> "time.init"
  "io/fs.init" -> "unicode/utf8.init"
  "path.init" -> "errors.init"
  "path.init" -> "internal/bytealg.init"
  "path.init" -> "unicode/utf8.init"
  "path.init" -> "errors.New"
  "io/fs.init" -> "path.init"
  "io/fs.init" -> "errors.init"
  "io/fs.init" -> "sort.init"
  "io/fs.init" -> "io.init"
  "io/fs.init" -> "io/fs.errInvalid"
  "io/fs.init" -> "io/fs.errPermission"
  "io/fs.init" -> "io/fs.errExist"
  "io/fs.init" -> "io/fs.errNotExist"
  "io/fs.init" -> "io/fs.errClosed"
  "io/fs.init" -> "errors.New"
  "os.init" -> "io/fs.init"
  "os.init" -> "sort.init"
  "os.init" -> "io.init"
  "os.init" -> "runtime.init"
  "os.init" -> "sync.init"
  "os.init" -> "syscall.init"
  "os.init" -> "unsafe.init"
  "internal/testlog.init" -> "sync.init"
  "internal/testlog.init" -> "sync/atomic.init"
  "os.init" -> "internal/testlog.init"
  "os.init" -> "internal/oserror.init"
  "internal/syscall/unix.init" -> "syscall.init"
  "internal/syscall/unix.init" -> "unsafe.init"
  "internal/syscall/unix.init" -> "sync/atomic.init"
  "internal/poll.init" -> "internal/syscall/unix.init"
  "internal/poll.init" -> "sync/atomic.init"
  "internal/poll.init" -> "syscall.init"
  "internal/poll.init" -> "errors.init"
  "internal/poll.init" -> "sync.init"
  "internal/poll.init" -> "time.init"
  "internal/poll.init" -> "unsafe.init"
  "internal/poll.init" -> "io.init"
  "internal/poll.init" -> "runtime.init"
  "internal/poll.init" -> "errors.New"
  "internal/poll.init" -> "errors.New"
  "internal/poll.init" -> "errors.New"
  "os.init" -> "internal/poll.init"
  "os.init" -> "errors.init"
  "os.init" -> "sync/atomic.init"
  "os.init" -> "time.init"
  "os.init" -> "internal/itoa.init"
  "internal/syscall/execenv.init" -> "syscall.init"
  "os.init" -> "internal/syscall/execenv.init"
  "os.init" -> "internal/unsafeheader.init"
  "os.init" -> "internal/syscall/unix.init"
  "os.init" -> "os.errNoDeadline"
  "os.init" -> "os.errDeadlineExceeded"
  "os.init" -> "errors.New"
  "os.init" -> "errors.New"
  "internal/syscall/unix.IsNonblock" -> "syscall.Syscall"
  "os.NewFile" -> "internal/syscall/unix.IsNonblock"
  "(*sync.Once).Do" -> "sync/atomic.LoadUint32"
  "(*sync.Once).doSlow" -> "(*sync.Mutex).Lock"
  "(*sync.Once).doSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Once).doSlow" -> "sync/atomic.StoreUint32"
  "syscall.Getenv" -> "(*sync.Once).Do"
  "(*sync.RWMutex).RLock" -> "internal/race.Disable"
  "(*sync.RWMutex).RLock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).RLock" -> "sync.runtime_SemacquireMutex"
  "(*sync.RWMutex).RLock" -> "internal/race.Enable"
  "(*sync.RWMutex).RLock" -> "internal/race.Acquire"
  "syscall.Getenv" -> "(*sync.RWMutex).RLock"
  "(*sync.RWMutex).RUnlock" -> "internal/race.ReleaseMerge"
  "(*sync.RWMutex).RUnlock" -> "internal/race.Disable"
  "(*sync.RWMutex).RUnlock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).rUnlockSlow" -> "internal/race.Enable"
  "(*sync.RWMutex).rUnlockSlow" -> "sync.fatal"
  "(*sync.RWMutex).rUnlockSlow" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).rUnlockSlow" -> "sync.runtime_Semrelease"
  "(*sync.RWMutex).RUnlock" -> "(*sync.RWMutex).rUnlockSlow"
  "(*sync.RWMutex).RUnlock" -> "internal/race.Enable"
  "syscall.Getenv" -> "(*sync.RWMutex).RUnlock"
  "time.initLocal" -> "syscall.Getenv"
  "time.initLocal" -> "time.loadLocation"
  "time.initLocal" -> "time.loadLocation"
  "time.initLocal" -> "time.loadLocation"
  "(*sync.Once).doSlow" -> "time.initLocal"
  "(*sync.Once).doSlow" -> "internal/poll.runtime_pollServerInit"
  "(*sync.Once).doSlow" -> "(*io.pipe).closeRead$1"
  "(*sync.Once).doSlow" -> "(*io.pipe).closeWrite$1"
  "strings.makeStringFinder" -> "strings.HasPrefix"
  "strings.makeStringFinder" -> "strings.longestCommonSuffix"
  "strings.makeSingleStringReplacer" -> "strings.makeStringFinder"
  "(*strings.Replacer).build" -> "strings.makeSingleStringReplacer"
  "(*strings.trieNode).add" -> "(*strings.trieNode).add"
  "(*strings.trieNode).add" -> "(*strings.trieNode).add"
  "(*strings.trieNode).add" -> "(*strings.trieNode).add"
  "(*strings.trieNode).add" -> "(*strings.trieNode).add"
  "(*strings.trieNode).add" -> "(*strings.trieNode).add"
  "strings.makeGenericReplacer" -> "(*strings.trieNode).add"
  "(*strings.Replacer).build" -> "strings.makeGenericReplacer"
  "(*strings.Replacer).buildOnce" -> "(*strings.Replacer).build"
  "(*sync.Once).doSlow" -> "(*strings.Replacer).buildOnce"
  "hash/crc32.ieeeInit" -> "hash/crc32.archAvailableIEEE"
  "hash/crc32.slicingMakeTable" -> "hash/crc32.simplePopulateTable"
  "hash/crc32.archInitIEEE" -> "hash/crc32.slicingMakeTable"
  "hash/crc32.ieeeInit" -> "hash/crc32.archInitIEEE"
  "hash/crc32.ieeeInit" -> "hash/crc32.slicingMakeTable"
  "(*sync.Once).doSlow" -> "hash/crc32.ieeeInit"
  "(*compress/flate.huffmanDecoder).init" -> "math/bits.Reverse16"
  "(*compress/flate.huffmanDecoder).init" -> "math/bits.Reverse16"
  "compress/flate.fixedHuffmanDecoderInit$1" -> "(*compress/flate.huffmanDecoder).init"
  "(*sync.Once).doSlow" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "(*sync.Once).doSlow" -> "syscall.copyenv"
  "(*sync.Once).Do" -> "(*sync.Once).doSlow"
  "(*internal/poll.pollDesc).init" -> "(*sync.Once).Do"
  "(*internal/poll.pollDesc).init" -> "internal/poll.runtime_pollOpen"
  "(*internal/poll.pollDesc).init" -> "internal/poll.errnoErr"
  "(*internal/poll.FD).Init" -> "(*internal/poll.pollDesc).init"
  "os.newFile" -> "(*internal/poll.FD).Init"
  "syscall.fstatat" -> "syscall.BytePtrFromString"
  "syscall.fstatat" -> "syscall.Syscall6"
  "syscall.fstatat" -> "syscall.errnoErr"
  "syscall.Stat" -> "syscall.fstatat"
  "os.statNolog$1" -> "syscall.Stat"
  "os.ignoringEINTR" -> "os.statNolog$1"
  "syscall.Fstat" -> "syscall.Syscall"
  "syscall.Fstat" -> "syscall.errnoErr"
  "os.newFile$1" -> "syscall.Fstat"
  "os.ignoringEINTR" -> "os.newFile$1"
  "syscall.Lstat" -> "syscall.fstatat"
  "os.lstatNolog$1" -> "syscall.Lstat"
  "os.ignoringEINTR" -> "os.lstatNolog$1"
  "os.syscallMode" -> "(io/fs.FileMode).Perm"
  "os.chmod$1" -> "os.syscallMode"
  "syscall.fchmodat" -> "syscall.BytePtrFromString"
  "syscall.fchmodat" -> "syscall.Syscall"
  "syscall.fchmodat" -> "syscall.errnoErr"
  "syscall.Fchmodat" -> "syscall.fchmodat"
  "syscall.Chmod" -> "syscall.Fchmodat"
  "os.chmod$1" -> "syscall.Chmod"
  "os.ignoringEINTR" -> "os.chmod$1"
  "os.newFile" -> "os.ignoringEINTR"
  "syscall.fcntl" -> "syscall.Syscall"
  "syscall.fcntl" -> "syscall.errnoErr"
  "syscall.SetNonblock" -> "syscall.fcntl"
  "syscall.SetNonblock" -> "syscall.fcntl"
  "os.newFile" -> "syscall.SetNonblock"
  "(*os.dirInfo).close" -> "(*sync.Pool).Put"
  "(*os.file).close" -> "(*os.dirInfo).close"
  "(*internal/poll.fdMutex).increfAndClose" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).increfAndClose" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.fdMutex).increfAndClose" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.fdMutex).increfAndClose" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.FD).Close" -> "(*internal/poll.fdMutex).increfAndClose"
  "(*internal/poll.FD).Close" -> "internal/poll.errClosing"
  "(*internal/poll.pollDesc).evict" -> "internal/poll.runtime_pollUnblock"
  "(*internal/poll.FD).Close" -> "(*internal/poll.pollDesc).evict"
  "(*internal/poll.FD).Close" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Close" -> "internal/poll.runtime_Semacquire"
  "(*os.file).close" -> "(*internal/poll.FD).Close"
  "os.newFile" -> "(*os.file).close"
  "os.NewFile" -> "os.newFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "errors.New"
  "os.init#1" -> "os.runtime_args"
  "os.init" -> "os.init#1"
  "syscall.Getrlimit" -> "syscall.RawSyscall"
  "syscall.Getrlimit" -> "syscall.errnoErr"
  "os.init#2" -> "syscall.Getrlimit"
  "os.init#2" -> "os.adjustFileLimit"
  "syscall.Setrlimit" -> "syscall.RawSyscall"
  "syscall.Setrlimit" -> "syscall.errnoErr"
  "os.init#2" -> "syscall.Setrlimit"
  "os.init" -> "os.init#2"
  "fmt.init" -> "os.init"
  "fmt.init" -> "reflect.init"
  "fmt.init" -> "sync.init"
  "fmt.init" -> "math.init"
  "fmt.init" -> "errors.New"
  "fmt.init" -> "errors.New"
  "compress/flate.init" -> "fmt.init"
  "compress/flate.init" -> "io.init"
  "compress/flate.init" -> "math.init"
  "compress/flate.init" -> "math/bits.init"
  "compress/flate.init" -> "sort.init"
  "bufio.init" -> "bytes.init"
  "bufio.init" -> "errors.init"
  "bufio.init" -> "io.init"
  "strings.init" -> "unicode/utf8.init"
  "strings.init" -> "unsafe.init"
  "strings.init" -> "errors.init"
  "strings.init" -> "io.init"
  "strings.init" -> "sync.init"
  "strings.init" -> "internal/bytealg.init"
  "strings.init" -> "unicode.init"
  "bufio.init" -> "strings.init"
  "bufio.init" -> "unicode/utf8.init"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "compress/flate.init" -> "bufio.init"
  "compress/flate.init" -> "strconv.init"
  "compress/flate.init" -> "sync.init"
  "compress/flate.init" -> "errors.New"
  "compress/flate.generateFixedOffsetEncoding" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.reverseBits" -> "math/bits.Reverse16"
  "compress/flate.generateFixedOffsetEncoding" -> "compress/flate.reverseBits"
  "compress/flate.init" -> "compress/flate.generateFixedOffsetEncoding"
  "compress/flate.generateFixedLiteralEncoding" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.generateFixedLiteralEncoding" -> "compress/flate.reverseBits"
  "compress/flate.init" -> "compress/flate.generateFixedLiteralEncoding"
  "compress/flate.init#1" -> "compress/flate.newHuffmanEncoder"
  "math/bits.Len" -> "math/bits.Len32"
  "math/bits.Len" -> "math/bits.Len64"
  "sort.Sort" -> "math/bits.Len"
  "sort.pdqsort" -> "sort.insertionSort"
  "sort.siftDown" -> "(*runtime/pprof.keysByCount).Less"
  "sort.siftDown" -> "(sort.Float64Slice).Less"
  "sort.siftDown" -> "(compress/flate.byFreq).Less"
  "sort.siftDown" -> "(sort.IntSlice).Less"
  "sort.siftDown" -> "(sort.StringSlice).Less"
  "sort.siftDown" -> "(compress/flate.byLiteral).Less"
  "sort.siftDown" -> "(*runtime/pprof.keysByCount).Less"
  "sort.siftDown" -> "(sort.Float64Slice).Less"
  "sort.siftDown" -> "(compress/flate.byFreq).Less"
  "sort.siftDown" -> "(sort.IntSlice).Less"
  "sort.siftDown" -> "(sort.StringSlice).Less"
  "sort.siftDown" -> "(compress/flate.byLiteral).Less"
  "sort.siftDown" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.siftDown" -> "(sort.Float64Slice).Swap"
  "sort.siftDown" -> "(compress/flate.byFreq).Swap"
  "sort.siftDown" -> "(sort.IntSlice).Swap"
  "sort.siftDown" -> "(sort.StringSlice).Swap"
  "sort.siftDown" -> "(compress/flate.byLiteral).Swap"
  "sort.heapSort" -> "sort.siftDown"
  "sort.heapSort" -> "sort.siftDown"
  "sort.heapSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.heapSort" -> "(sort.Float64Slice).Swap"
  "sort.heapSort" -> "(compress/flate.byFreq).Swap"
  "sort.heapSort" -> "(sort.IntSlice).Swap"
  "sort.heapSort" -> "(sort.StringSlice).Swap"
  "sort.heapSort" -> "(compress/flate.byLiteral).Swap"
  "sort.pdqsort" -> "sort.heapSort"
  "sort.nextPowerOfTwo" -> "math/bits.Len"
  "sort.breakPatterns" -> "sort.nextPowerOfTwo"
  "sort.breakPatterns" -> "(*sort.xorshift).Next"
  "sort.breakPatterns" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.breakPatterns" -> "(sort.Float64Slice).Swap"
  "sort.breakPatterns" -> "(compress/flate.byFreq).Swap"
  "sort.breakPatterns" -> "(sort.IntSlice).Swap"
  "sort.breakPatterns" -> "(sort.StringSlice).Swap"
  "sort.breakPatterns" -> "(compress/flate.byLiteral).Swap"
  "sort.pdqsort" -> "sort.breakPatterns"
  "sort.order2" -> "(*runtime/pprof.keysByCount).Less"
  "sort.order2" -> "(sort.Float64Slice).Less"
  "sort.order2" -> "(compress/flate.byFreq).Less"
  "sort.order2" -> "(sort.IntSlice).Less"
  "sort.order2" -> "(sort.StringSlice).Less"
  "sort.order2" -> "(compress/flate.byLiteral).Less"
  "sort.median" -> "sort.order2"
  "sort.median" -> "sort.order2"
  "sort.median" -> "sort.order2"
  "sort.medianAdjacent" -> "sort.median"
  "sort.choosePivot" -> "sort.medianAdjacent"
  "sort.choosePivot" -> "sort.medianAdjacent"
  "sort.choosePivot" -> "sort.medianAdjacent"
  "sort.choosePivot" -> "sort.median"
  "sort.pdqsort" -> "sort.choosePivot"
  "sort.reverseRange" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.reverseRange" -> "(sort.Float64Slice).Swap"
  "sort.reverseRange" -> "(compress/flate.byFreq).Swap"
  "sort.reverseRange" -> "(sort.IntSlice).Swap"
  "sort.reverseRange" -> "(sort.StringSlice).Swap"
  "sort.reverseRange" -> "(compress/flate.byLiteral).Swap"
  "sort.pdqsort" -> "sort.reverseRange"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partialInsertionSort" -> "(sort.Float64Slice).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Less"
  "sort.partialInsertionSort" -> "(sort.IntSlice).Less"
  "sort.partialInsertionSort" -> "(sort.StringSlice).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partialInsertionSort" -> "(sort.Float64Slice).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.partialInsertionSort" -> "(sort.IntSlice).Swap"
  "sort.partialInsertionSort" -> "(sort.StringSlice).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partialInsertionSort" -> "(sort.Float64Slice).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Less"
  "sort.partialInsertionSort" -> "(sort.IntSlice).Less"
  "sort.partialInsertionSort" -> "(sort.StringSlice).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partialInsertionSort" -> "(sort.Float64Slice).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.partialInsertionSort" -> "(sort.IntSlice).Swap"
  "sort.partialInsertionSort" -> "(sort.StringSlice).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partialInsertionSort" -> "(sort.Float64Slice).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Less"
  "sort.partialInsertionSort" -> "(sort.IntSlice).Less"
  "sort.partialInsertionSort" -> "(sort.StringSlice).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partialInsertionSort" -> "(sort.Float64Slice).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.partialInsertionSort" -> "(sort.IntSlice).Swap"
  "sort.partialInsertionSort" -> "(sort.StringSlice).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.pdqsort" -> "sort.partialInsertionSort"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partitionEqual" -> "(sort.Float64Slice).Swap"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Swap"
  "sort.partitionEqual" -> "(sort.IntSlice).Swap"
  "sort.partitionEqual" -> "(sort.StringSlice).Swap"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Swap"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partitionEqual" -> "(sort.Float64Slice).Less"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Less"
  "sort.partitionEqual" -> "(sort.IntSlice).Less"
  "sort.partitionEqual" -> "(sort.StringSlice).Less"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Less"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partitionEqual" -> "(sort.Float64Slice).Less"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Less"
  "sort.partitionEqual" -> "(sort.IntSlice).Less"
  "sort.partitionEqual" -> "(sort.StringSlice).Less"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Less"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partitionEqual" -> "(sort.Float64Slice).Swap"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Swap"
  "sort.partitionEqual" -> "(sort.IntSlice).Swap"
  "sort.partitionEqual" -> "(sort.StringSlice).Swap"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Swap"
  "sort.pdqsort" -> "sort.partitionEqual"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(sort.Float64Slice).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(sort.IntSlice).Swap"
  "sort.partition" -> "(sort.StringSlice).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(sort.Float64Slice).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(sort.IntSlice).Less"
  "sort.partition" -> "(sort.StringSlice).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(sort.Float64Slice).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(sort.IntSlice).Less"
  "sort.partition" -> "(sort.StringSlice).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(sort.Float64Slice).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(sort.IntSlice).Swap"
  "sort.partition" -> "(sort.StringSlice).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(sort.Float64Slice).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(sort.IntSlice).Swap"
  "sort.partition" -> "(sort.StringSlice).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(sort.Float64Slice).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(sort.IntSlice).Less"
  "sort.partition" -> "(sort.StringSlice).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(sort.Float64Slice).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(sort.IntSlice).Less"
  "sort.partition" -> "(sort.StringSlice).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(sort.Float64Slice).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(sort.IntSlice).Swap"
  "sort.partition" -> "(sort.StringSlice).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(sort.Float64Slice).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(sort.IntSlice).Swap"
  "sort.partition" -> "(sort.StringSlice).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.pdqsort" -> "sort.partition"
  "sort.pdqsort" -> "sort.pdqsort"
  "sort.pdqsort" -> "sort.pdqsort"
  "sort.pdqsort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.pdqsort" -> "(sort.Float64Slice).Less"
  "sort.pdqsort" -> "(compress/flate.byFreq).Less"
  "sort.pdqsort" -> "(sort.IntSlice).Less"
  "sort.pdqsort" -> "(sort.StringSlice).Less"
  "sort.pdqsort" -> "(compress/flate.byLiteral).Less"
  "sort.Sort" -> "sort.pdqsort"
  "sort.Sort" -> "(*runtime/pprof.keysByCount).Len"
  "sort.Sort" -> "(sort.Float64Slice).Len"
  "sort.Sort" -> "(compress/flate.byFreq).Len"
  "sort.Sort" -> "(sort.IntSlice).Len"
  "sort.Sort" -> "(sort.StringSlice).Len"
  "sort.Sort" -> "(compress/flate.byLiteral).Len"
  "(*compress/flate.byFreq).sort" -> "sort.Sort"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.byFreq).sort"
  "(*compress/flate.huffmanEncoder).bitCounts" -> "compress/flate.maxNode"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.huffmanEncoder).bitCounts"
  "(*compress/flate.byLiteral).sort" -> "sort.Sort"
  "(*compress/flate.huffmanEncoder).assignEncodingAndSize" -> "(*compress/flate.byLiteral).sort"
  "(*compress/flate.huffmanEncoder).assignEncodingAndSize" -> "compress/flate.reverseBits"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.huffmanEncoder).assignEncodingAndSize"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.hcode).set"
  "compress/flate.init#1" -> "(*compress/flate.huffmanEncoder).generate"
  "compress/flate.init" -> "compress/flate.init#1"
  "(*time.Location).get" -> "(*sync.Once).Do"
  "(time.Time).abs" -> "(*time.Location).get"
  "(*time.Time).unixSec" -> "(*time.Time).sec"
  "(time.Time).abs" -> "(*time.Time).unixSec"
  "(*time.Location).lookup" -> "(*time.Location).get"
  "(*time.Location).lookupFirstZone" -> "(*time.Location).firstZoneUsed"
  "(*time.Location).lookup" -> "(*time.Location).lookupFirstZone"
  "(*time.Location).lookup" -> "time.tzset"
  "(time.Time).abs" -> "(*time.Location).lookup"
  "(time.Time).date" -> "(time.Time).abs"
  "(time.Time).date" -> "time.absDate"
  "(time.Time).Year" -> "(time.Time).date"
  "(time.Time).UnixMicro" -> "(*time.Time).unixSec"
  "(time.Time).UnixMicro" -> "(*time.Time).nsec"
  "(*compress/flate.huffmanBitWriter).write" -> "(*compress/flate.dictWriter).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*os.File).Write"
  "(*compress/flate.huffmanBitWriter).writeBits" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).flush" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).flush"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.compressor).writeStoredBlock" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBytes" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeBytes" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.compressor).writeStoredBlock" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "hash.init" -> "io.init"
  "(*io.onceError).Store" -> "(*sync.Mutex).Lock"
  "(*io.onceError).Store" -> "(*sync.Mutex).Unlock"
  "(*internal/poll.FD).SetsockoptLinger" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptLinger" -> "(*internal/poll.FD).decref"
  "syscall.SetsockoptLinger" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptLinger" -> "syscall.SetsockoptLinger"
  "(*bufio.Reader).ReadByte" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).ReadByte" -> "(*bufio.Reader).fill"
  "(*fmt.ss).advance" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).getRune" -> "(*fmt.ss).ReadRune"
  "(*fmt.ss).getRune" -> "(*fmt.ss).error"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).errorString" -> "errors.New"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).mustReadRune" -> "(*fmt.ss).getRune"
  "(*fmt.ss).mustReadRune" -> "(*fmt.ss).error"
  "(*fmt.ss).advance" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).advance" -> "(*fmt.ss).UnreadRune"
  "(*sync/atomic.Uint32).Load" -> "sync/atomic.LoadUint32"
  "(*os.ProcessState).exited" -> "(syscall.WaitStatus).Exited"
  "(*os.ProcessState).Exited" -> "(*os.ProcessState).exited"
  "(*runtime/internal/atomic.Uint64).Add" -> "runtime/internal/atomic.Xadd64"
  "(*internal/reflectlite.rtype).NumMethod" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).NumMethod" -> "(*internal/reflectlite.interfaceType).NumMethod"
  "(*internal/reflectlite.rtype).uncommon" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).exportedMethods" -> "(*internal/reflectlite.rtype).uncommon"
  "(*internal/reflectlite.uncommonType).exportedMethods" -> "internal/reflectlite.add"
  "(*internal/reflectlite.rtype).exportedMethods" -> "(*internal/reflectlite.uncommonType).exportedMethods"
  "(*internal/reflectlite.rtype).NumMethod" -> "(*internal/reflectlite.rtype).exportedMethods"
  "(*time.Time).setLoc" -> "(*time.Time).stripMono"
  "(time.Time).In" -> "(*time.Time).setLoc"
  "(*io.pipe).closeWrite" -> "(*io.onceError).Store"
  "(*io.pipe).closeWrite" -> "(*sync.Once).Do"
  "(*io.PipeWriter).CloseWithError" -> "(*io.pipe).closeWrite"
  "(*io.PipeWriter).Close" -> "(*io.PipeWriter).CloseWithError"
  "syscall.Fchmod" -> "syscall.Syscall"
  "syscall.Fchmod" -> "syscall.errnoErr"
  "(*internal/poll.FD).readLock" -> "(*internal/poll.fdMutex).rwlock"
  "(*internal/poll.FD).readLock" -> "internal/poll.errClosing"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).readUnlock" -> "(*internal/poll.fdMutex).rwunlock"
  "(*internal/poll.FD).readUnlock" -> "(*internal/poll.FD).destroy"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.pollDesc).prepareRead" -> "(*internal/poll.pollDesc).prepare"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.pollDesc).waitRead" -> "(*internal/poll.pollDesc).wait"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).Ftruncate" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Ftruncate" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fchmod$1" -> "syscall.Fchmod"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fchmod$1"
  "syscall.Fchown" -> "syscall.Syscall"
  "syscall.Fchown" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fchown$1" -> "syscall.Fchown"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fchown$1"
  "(*internal/poll.FD).Fstat$1" -> "syscall.Fstat"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fstat$1"
  "syscall.Fsync" -> "syscall.Syscall"
  "syscall.Fsync" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fsync$1" -> "syscall.Fsync"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fsync$1"
  "syscall.Ftruncate" -> "syscall.Syscall"
  "syscall.Ftruncate" -> "syscall.errnoErr"
  "(*internal/poll.FD).Ftruncate$1" -> "syscall.Ftruncate"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Ftruncate$1"
  "(*internal/poll.FD).Ftruncate" -> "internal/poll.ignoringEINTR"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.protobuf).uint64" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).uint64" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).int64" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).endMessage"
  "flag.init$1" -> "(*flag.FlagSet).Output"
  "fmt.Fprintf" -> "fmt.newPrinter"
  "fmt.Fprintf" -> "(*fmt.pp).doPrintf"
  "fmt.Fprintf" -> "(*fmt.pp).free"
  "(*strings.Builder).copyCheck" -> "strings.noescape"
  "(*strings.Builder).Write" -> "(*strings.Builder).copyCheck"
  "fmt.Fprintf" -> "(*strings.Builder).Write"
  "(*text/tabwriter.Writer).reset" -> "(*text/tabwriter.Writer).addLine"
  "(*text/tabwriter.Writer).handlePanic" -> "(*text/tabwriter.Writer).reset"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).handlePanic"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).terminateCell"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).addLine"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).Flush" -> "(*os.File).Write"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Flush"
  "(*bufio.Writer).Write" -> "(*os.File).Write"
  "(*text/tabwriter.Writer).write0" -> "(*bufio.Writer).Write"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeN" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeN" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writePadding" -> "(*text/tabwriter.Writer).writeN"
  "(*text/tabwriter.Writer).writePadding" -> "(*text/tabwriter.Writer).writeN"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).writePadding"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).writePadding"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).writePadding"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).format" -> "(*text/tabwriter.Writer).writeLines"
  "(*text/tabwriter.Writer).format" -> "(*text/tabwriter.Writer).writeLines"
  "(*text/tabwriter.Writer).format" -> "(*text/tabwriter.Writer).format"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).format"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).reset"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).endEscape"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).terminateCell"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).flushNoDefers"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).startEscape"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).startEscape"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).endEscape"
  "fmt.Fprintf" -> "(*text/tabwriter.Writer).Write"
  "(*bytes.Buffer).Write" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).Write" -> "(*bytes.Buffer).grow"
  "fmt.Fprintf" -> "(*bytes.Buffer).Write"
  "fmt.Fprintf" -> "(*os.File).Write"
  "flag.init$1" -> "fmt.Fprintf"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).pointer" -> "(*internal/reflectlite.rtype).pointers"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.Value).pointer"
  "(internal/reflectlite.Value).Len" -> "internal/reflectlite.chanlen"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.Value).pointer"
  "(internal/reflectlite.Value).Len" -> "internal/reflectlite.maplen"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.flag).kind"
  "sort.Slice" -> "(internal/reflectlite.Value).Len"
  "sort.Slice" -> "math/bits.Len"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$2"
  "internal/reflectlite.arrayAt" -> "internal/reflectlite.add"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.arrayAt"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.arrayAt"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.typedmemmove"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.typedmemmove"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.typedmemmove"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.insertionSort_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.insertionSort_func" -> "io/fs.ReadDir$1"
  "sort.insertionSort_func" -> "flag.sortFlags$1"
  "runtime/pprof.writeHeapInternal$1" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapInternal$1" -> "(*runtime.MemProfileRecord).InUseBytes"
  "sort.insertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.insertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.pdqsort_func" -> "sort.insertionSort_func"
  "sort.siftDown_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.siftDown_func" -> "io/fs.ReadDir$1"
  "sort.siftDown_func" -> "flag.sortFlags$1"
  "sort.siftDown_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.siftDown_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.siftDown_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.siftDown_func" -> "io/fs.ReadDir$1"
  "sort.siftDown_func" -> "flag.sortFlags$1"
  "sort.siftDown_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.siftDown_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$1"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$2"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$9"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$3"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$4"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$5"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$6"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$7"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$8"
  "sort.heapSort_func" -> "sort.siftDown_func"
  "sort.heapSort_func" -> "sort.siftDown_func"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.pdqsort_func" -> "sort.heapSort_func"
  "sort.breakPatterns_func" -> "sort.nextPowerOfTwo"
  "sort.breakPatterns_func" -> "(*sort.xorshift).Next"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$1"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$2"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$9"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$3"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$4"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$5"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$6"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$7"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$8"
  "sort.pdqsort_func" -> "sort.breakPatterns_func"
  "sort.order2_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.order2_func" -> "io/fs.ReadDir$1"
  "sort.order2_func" -> "flag.sortFlags$1"
  "sort.order2_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.order2_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.median_func" -> "sort.order2_func"
  "sort.median_func" -> "sort.order2_func"
  "sort.median_func" -> "sort.order2_func"
  "sort.medianAdjacent_func" -> "sort.median_func"
  "sort.choosePivot_func" -> "sort.medianAdjacent_func"
  "sort.choosePivot_func" -> "sort.medianAdjacent_func"
  "sort.choosePivot_func" -> "sort.medianAdjacent_func"
  "sort.choosePivot_func" -> "sort.median_func"
  "sort.pdqsort_func" -> "sort.choosePivot_func"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$1"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$2"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$9"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$3"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$4"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$5"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$6"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$7"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$8"
  "sort.pdqsort_func" -> "sort.reverseRange_func"
  "sort.partialInsertionSort_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partialInsertionSort_func" -> "io/fs.ReadDir$1"
  "sort.partialInsertionSort_func" -> "flag.sortFlags$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.partialInsertionSort_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partialInsertionSort_func" -> "io/fs.ReadDir$1"
  "sort.partialInsertionSort_func" -> "flag.sortFlags$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.partialInsertionSort_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partialInsertionSort_func" -> "io/fs.ReadDir$1"
  "sort.partialInsertionSort_func" -> "flag.sortFlags$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.pdqsort_func" -> "sort.partialInsertionSort_func"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$1"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$2"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$9"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$3"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$4"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$5"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$6"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$7"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$8"
  "sort.partitionEqual_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partitionEqual_func" -> "io/fs.ReadDir$1"
  "sort.partitionEqual_func" -> "flag.sortFlags$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partitionEqual_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partitionEqual_func" -> "io/fs.ReadDir$1"
  "sort.partitionEqual_func" -> "flag.sortFlags$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$1"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$2"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$9"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$3"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$4"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$5"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$6"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$7"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$8"
  "sort.pdqsort_func" -> "sort.partitionEqual_func"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partition_func" -> "io/fs.ReadDir$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partition_func" -> "io/fs.ReadDir$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partition_func" -> "io/fs.ReadDir$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.partition_func" -> "io/fs.ReadDir$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.pdqsort_func" -> "sort.partition_func"
  "sort.pdqsort_func" -> "sort.pdqsort_func"
  "sort.pdqsort_func" -> "sort.pdqsort_func"
  "sort.pdqsort_func" -> "(*runtime/pprof.Profile).WriteTo$1"
  "sort.pdqsort_func" -> "io/fs.ReadDir$1"
  "sort.pdqsort_func" -> "flag.sortFlags$1"
  "sort.pdqsort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.pdqsort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.Slice" -> "sort.pdqsort_func"
  "internal/reflectlite.ValueOf" -> "internal/reflectlite.escapes"
  "internal/reflectlite.unpackEface" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.unpackEface" -> "internal/reflectlite.ifaceIndir"
  "internal/reflectlite.ValueOf" -> "internal/reflectlite.unpackEface"
  "sort.Slice" -> "internal/reflectlite.ValueOf"
  "internal/reflectlite.Swapper" -> "internal/reflectlite.ValueOf"
  "(internal/reflectlite.Value).Kind" -> "(internal/reflectlite.flag).kind"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Kind"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Kind"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Len"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Type"
  "internal/reflectlite.Swapper" -> "(*internal/reflectlite.rtype).Size"
  "internal/reflectlite.Swapper" -> "internal/reflectlite.unsafe_New"
  "internal/reflectlite.Swapper" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.Swapper" -> "(*internal/reflectlite.rtype).Elem"
  "sort.Slice" -> "internal/reflectlite.Swapper"
  "flag.sortFlags" -> "sort.Slice"
  "(*flag.FlagSet).VisitAll" -> "flag.sortFlags"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprintf"
  "(*flag.FlagSet).PrintDefaults$1" -> "flag.UnquoteUsage"
  "(*strings.Builder).WriteString" -> "(*strings.Builder).copyCheck"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).Len"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "strings.Count" -> "unicode/utf8.RuneCountInString"
  "strings.Count" -> "internal/bytealg.CountString"
  "strings.Count" -> "strings.Index"
  "strings.Replace" -> "strings.Count"
  "(*strings.Builder).Grow" -> "(*strings.Builder).copyCheck"
  "(*strings.Builder).Grow" -> "(*strings.Builder).grow"
  "strings.Replace" -> "(*strings.Builder).Grow"
  "strings.Replace" -> "(*strings.Builder).WriteString"
  "strings.Replace" -> "(*strings.Builder).String"
  "strings.Replace" -> "(*strings.Builder).WriteString"
  "strings.Replace" -> "(*strings.Builder).WriteString"
  "strings.Replace" -> "strings.Index"
  "strings.Replace" -> "unicode/utf8.DecodeRuneInString"
  "strings.ReplaceAll" -> "strings.Replace"
  "(*flag.FlagSet).PrintDefaults$1" -> "strings.ReplaceAll"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "flag.isZeroValue" -> "reflect.TypeOf"
  "flag.isZeroValue" -> "(*reflect.rtype).Kind"
  "flag.isZeroValue" -> "(*reflect.rtype).Elem"
  "flag.isZeroValue" -> "reflect.New"
  "flag.isZeroValue$1" -> "(*reflect.rtype).Kind"
  "flag.isZeroValue$1" -> "(*reflect.rtype).Elem"
  "fmt.Errorf" -> "fmt.newPrinter"
  "fmt.Errorf" -> "(*fmt.pp).doPrintf"
  "fmt.Errorf" -> "errors.New"
  "fmt.Errorf" -> "(*fmt.pp).free"
  "flag.isZeroValue$1" -> "fmt.Errorf"
  "flag.isZeroValue" -> "flag.isZeroValue$1"
  "flag.isZeroValue" -> "(reflect.Value).Interface"
  "flag.isZeroValue" -> "reflect.Zero"
  "(*flag.FlagSet).PrintDefaults$1" -> "flag.isZeroValue"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).String"
  "fmt.Fprint" -> "fmt.newPrinter"
  "(*fmt.pp).doPrint" -> "reflect.TypeOf"
  "(*fmt.pp).doPrint" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).doPrint" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrint" -> "(*fmt.pp).printArg"
  "fmt.Fprint" -> "(*fmt.pp).doPrint"
  "fmt.Fprint" -> "(*fmt.pp).free"
  "fmt.Fprint" -> "(*text/tabwriter.Writer).Write"
  "fmt.Fprint" -> "(*os.File).Write"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprint"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprintf"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprintf"
  "(*flag.FlagSet).VisitAll" -> "(*flag.FlagSet).PrintDefaults$1"
  "(*flag.FlagSet).PrintDefaults" -> "(*flag.FlagSet).VisitAll"
  "(*flag.FlagSet).PrintDefaults" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).PrintDefaults" -> "fmt.Fprintln"
  "(*flag.FlagSet).PrintDefaults" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).PrintDefaults" -> "fmt.Fprintln"
  "flag.PrintDefaults" -> "(*flag.FlagSet).PrintDefaults"
  "flag.init$1" -> "flag.PrintDefaults"
  "(time.Time).UTC" -> "(*time.Time).setLoc"
  "(*os.File).SyscallConn" -> "(*os.File).checkValid"
  "(*os.File).SyscallConn" -> "os.newRawConn"
  "(*strings.byteStringReplacer).WriteString" -> "strings.getStringWriter"
  "(*strings.byteStringReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(strings.stringWriter).WriteString" -> "(*strings.appendSliceWriter).Write"
  "(*strings.byteStringReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*strings.byteStringReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.byteStringReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(internal/reflectlite.name).data" -> "internal/reflectlite.add"
  "(internal/reflectlite.name).readVarint" -> "(internal/reflectlite.name).data"
  "(internal/reflectlite.name).name" -> "(internal/reflectlite.name).readVarint"
  "(internal/reflectlite.name).name" -> "(internal/reflectlite.name).data"
  "(*fmt.ss).doScanf" -> "fmt.errorHandler"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).advance"
  "(*fmt.ss).doScanf" -> "fmt.parsenum"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).errorString"
  "(*fmt.ss).doScanf" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).getRune"
  "(*fmt.ss).peek" -> "(*fmt.ss).getRune"
  "(*fmt.ss).peek" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).peek" -> "fmt.indexRune"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).peek"
  "(*fmt.ss).SkipSpace" -> "fmt.isSpace"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).errorString"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).notEOF" -> "(*fmt.ss).getRune"
  "(*fmt.ss).notEOF" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).consume" -> "(*fmt.ss).getRune"
  "(*fmt.ss).consume" -> "fmt.indexRune"
  "(*fmt.ss).consume" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).consume" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).accept" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).errorString"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).scanPercent"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).error"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).okVerb" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).getRune"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).error"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).error"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanBool"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).error"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).error"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).error"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).complexTokens"
  "(*fmt.ss).convertFloat" -> "fmt.indexRune"
  "strconv.special" -> "strconv.commonPrefixLenIgnoreCase"
  "strconv.special" -> "strconv.commonPrefixLenIgnoreCase"
  "math.Inf" -> "math.Float64frombits"
  "strconv.special" -> "math.Inf"
  "math.NaN" -> "math.Float64frombits"
  "strconv.special" -> "math.NaN"
  "strconv.atof32" -> "strconv.special"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.underscoreOK"
  "strconv.atof32" -> "strconv.readFloat"
  "strconv.atof32" -> "strconv.syntaxError"
  "strconv.atofHex" -> "strconv.rangeError"
  "strconv.atofHex" -> "math.Float32frombits"
  "strconv.atofHex" -> "math.Float64frombits"
  "strconv.atof32" -> "strconv.atofHex"
  "(*strconv.decimal).set" -> "strconv.lower"
  "strconv.atof32" -> "(*strconv.decimal).set"
  "strconv.atof32" -> "strconv.atof32exact"
  "strconv.eiselLemire32" -> "math.Float32frombits"
  "math/bits.LeadingZeros64" -> "math/bits.Len64"
  "strconv.eiselLemire32" -> "math/bits.LeadingZeros64"
  "strconv.eiselLemire32" -> "math/bits.Mul64"
  "strconv.eiselLemire32" -> "math/bits.Mul64"
  "strconv.eiselLemire32" -> "math.Float32frombits"
  "strconv.atof32" -> "strconv.eiselLemire32"
  "strconv.atof32" -> "strconv.eiselLemire32"
  "strconv.atof32" -> "strconv.syntaxError"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).RoundedInteger" -> "strconv.shouldRoundUp"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).RoundedInteger"
  "strconv.atof32" -> "(*strconv.decimal).floatBits"
  "strconv.atof32" -> "math.Float32frombits"
  "strconv.atof32" -> "strconv.rangeError"
  "strconv.parseFloatPrefix" -> "strconv.atof32"
  "strconv.atof64" -> "strconv.special"
  "strconv.atof64" -> "strconv.readFloat"
  "strconv.atof64" -> "strconv.syntaxError"
  "strconv.atof64" -> "strconv.atofHex"
  "strconv.atof64" -> "(*strconv.decimal).set"
  "strconv.atof64" -> "strconv.atof64exact"
  "strconv.eiselLemire64" -> "math.Float64frombits"
  "strconv.eiselLemire64" -> "math/bits.LeadingZeros64"
  "strconv.eiselLemire64" -> "math/bits.Mul64"
  "strconv.eiselLemire64" -> "math/bits.Mul64"
  "strconv.eiselLemire64" -> "math.Float64frombits"
  "strconv.atof64" -> "strconv.eiselLemire64"
  "strconv.atof64" -> "strconv.eiselLemire64"
  "strconv.atof64" -> "strconv.syntaxError"
  "strconv.atof64" -> "(*strconv.decimal).floatBits"
  "strconv.atof64" -> "math.Float64frombits"
  "strconv.atof64" -> "strconv.rangeError"
  "strconv.parseFloatPrefix" -> "strconv.atof64"
  "strconv.ParseFloat" -> "strconv.parseFloatPrefix"
  "strconv.ParseFloat" -> "strconv.syntaxError"
  "(*fmt.ss).convertFloat" -> "strconv.ParseFloat"
  "(*fmt.ss).convertFloat" -> "strconv.ParseFloat"
  "(*fmt.ss).convertFloat" -> "fmt.hasX"
  "strconv.ParseInt" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.baseError" -> "strconv.Itoa"
  "strconv.baseError" -> "errors.New"
  "strconv.ParseUint" -> "strconv.baseError"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.bitSizeError" -> "strconv.Itoa"
  "strconv.bitSizeError" -> "errors.New"
  "strconv.ParseUint" -> "strconv.bitSizeError"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.rangeError"
  "strconv.ParseUint" -> "strconv.rangeError"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.underscoreOK"
  "strconv.ParseInt" -> "strconv.ParseUint"
  "strconv.ParseInt" -> "strconv.rangeError"
  "strconv.ParseInt" -> "strconv.rangeError"
  "strconv.Atoi" -> "strconv.ParseInt"
  "(*fmt.ss).convertFloat" -> "strconv.Atoi"
  "(*fmt.ss).convertFloat" -> "(*fmt.ss).error"
  "(*fmt.ss).convertFloat" -> "math.Ldexp"
  "(*fmt.ss).convertFloat" -> "(*fmt.ss).error"
  "(*fmt.ss).convertFloat" -> "(*fmt.ss).error"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanComplex"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanComplex"
  "(*fmt.ss).scanRune" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanRune" -> "(*fmt.ss).getRune"
  "(*fmt.ss).scanRune" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).scanRune"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).getBase" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).getBase"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).scanNumber"
  "(*fmt.ss).scanInt" -> "strconv.ParseInt"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).scanBasePrefix"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).error"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).scanRune"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).getBase"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).scanNumber"
  "(*fmt.ss).scanUint" -> "strconv.ParseUint"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).scanBasePrefix"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).error"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).convertString" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).convertString" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).convertString" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).getRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeByte"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).errorString"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeRune"
  "strconv.index" -> "internal/bytealg.IndexByteString"
  "strconv.unquote" -> "strconv.index"
  "strconv.contains" -> "strconv.index"
  "strconv.unquote" -> "strconv.contains"
  "strconv.unquote" -> "strconv.contains"
  "strconv.unquote" -> "strconv.contains"
  "strconv.unquote" -> "unicode/utf8.ValidString"
  "strconv.unquote" -> "unicode/utf8.DecodeRuneInString"
  "strconv.UnquoteChar" -> "unicode/utf8.DecodeRuneInString"
  "strconv.UnquoteChar" -> "strconv.unhex"
  "strconv.UnquoteChar" -> "unicode/utf8.ValidRune"
  "strconv.unquote" -> "strconv.UnquoteChar"
  "strconv.unquote" -> "unicode/utf8.EncodeRune"
  "strconv.Unquote" -> "strconv.unquote"
  "(*fmt.ss).quotedString" -> "strconv.Unquote"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).error"
  "(*fmt.ss).convertString" -> "(*fmt.ss).quotedString"
  "(*fmt.ss).hexString" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).getRune"
  "(*fmt.ss).hexByte" -> "fmt.hexDigit"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).hexByte" -> "fmt.hexDigit"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).errorString"
  "(*fmt.ss).hexString" -> "(*fmt.ss).hexByte"
  "(*fmt.ss).hexString" -> "(*fmt.buffer).writeByte"
  "(*fmt.ss).hexString" -> "(*fmt.ss).errorString"
  "(*fmt.ss).convertString" -> "(*fmt.ss).hexString"
  "(*fmt.ss).token" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).token" -> "(*fmt.ss).getRune"
  "(*fmt.ss).token" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).token" -> "(*fmt.buffer).writeRune"
  "fmt.notSpace" -> "fmt.isSpace"
  "(*fmt.ss).token" -> "fmt.notSpace"
  "(*fmt.ss).convertString" -> "(*fmt.ss).token"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "reflect.ValueOf"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Kind"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Elem"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Kind"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanBool"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetBool"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetInt"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetString"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Elem"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Kind"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetFloat"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "reflect.MakeSlice"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Set"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Index"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetUint"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanComplex"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetComplex"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).errorString"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).scanOne"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).errorString"
  "(time.Time).locabs" -> "(*time.Location).get"
  "(time.Time).locabs" -> "(*time.Time).unixSec"
  "(time.Time).locabs" -> "(*time.Location).lookup"
  "(time.Time).AppendFormat" -> "(time.Time).locabs"
  "time.nextStdChunk" -> "time.startsWithLowerCase"
  "time.nextStdChunk" -> "time.startsWithLowerCase"
  "time.nextStdChunk" -> "time.isDigit"
  "time.nextStdChunk" -> "time.stdFracSecond"
  "(time.Time).AppendFormat" -> "time.nextStdChunk"
  "(time.Time).AppendFormat" -> "time.absDate"
  "(time.Time).AppendFormat" -> "time.absClock"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Month).String" -> "time.fmtInt"
  "(time.Time).AppendFormat" -> "(time.Month).String"
  "(time.Time).AppendFormat" -> "(time.Month).String"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.absWeekday"
  "(time.Weekday).String" -> "time.fmtInt"
  "(time.Time).AppendFormat" -> "(time.Weekday).String"
  "(time.Time).AppendFormat" -> "time.absWeekday"
  "(time.Time).AppendFormat" -> "(time.Weekday).String"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).Nanosecond" -> "(*time.Time).nsec"
  "(time.Time).AppendFormat" -> "(time.Time).Nanosecond"
  "time.formatNano" -> "time.digitsLen"
  "time.formatNano" -> "time.separator"
  "(time.Time).AppendFormat" -> "time.formatNano"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "time.appendInt"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).Writev" -> "internal/poll.newIovecWithBase"
  "(*internal/poll.FD).Writev" -> "(*syscall.Iovec).SetLen"
  "(*internal/poll.FD).Writev" -> "(*syscall.Iovec).SetLen"
  "internal/poll.writev" -> "syscall.Syscall"
  "(*internal/poll.FD).Writev" -> "internal/poll.writev"
  "(*internal/poll.FD).Writev" -> "internal/poll.consume"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).Writev" -> "internal/poll.init$1"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Disable"
  "(*sync.RWMutex).TryRLock" -> "sync/atomic.LoadInt32"
  "(*sync.RWMutex).TryRLock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Acquire"
  "(*runtime/internal/atomic.Int64).Add" -> "runtime/internal/atomic.Xaddint64"
  "internal/reflectlite.valueInterface" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).numMethod" -> "(*internal/reflectlite.rtype).NumMethod"
  "internal/reflectlite.valueInterface" -> "(internal/reflectlite.Value).numMethod"
  "internal/reflectlite.packEface" -> "internal/reflectlite.ifaceIndir"
  "internal/reflectlite.packEface" -> "internal/reflectlite.unsafe_New"
  "internal/reflectlite.packEface" -> "internal/reflectlite.typedmemmove"
  "internal/reflectlite.valueInterface" -> "internal/reflectlite.packEface"
  "(*internal/reflectlite.funcType).in" -> "internal/reflectlite.add"
  "path.Match" -> "path.scanChunk"
  "path.Match" -> "internal/bytealg.IndexByteString"
  "path.matchChunk" -> "unicode/utf8.DecodeRuneInString"
  "path.getEsc" -> "unicode/utf8.DecodeRuneInString"
  "path.matchChunk" -> "path.getEsc"
  "path.matchChunk" -> "path.getEsc"
  "path.matchChunk" -> "unicode/utf8.DecodeRuneInString"
  "path.Match" -> "path.matchChunk"
  "path.Match" -> "path.matchChunk"
  "path.Match" -> "path.scanChunk"
  "path.Match" -> "path.matchChunk"
  "(*io/fs.subFS).Glob" -> "path.Match"
  "io/fs.globWithLimit" -> "path.Match"
  "io/fs.globWithLimit" -> "io/fs.hasMeta"
  "io/fs.globWithLimit" -> "io/fs.Stat"
  "path.Split" -> "path.lastSlash"
  "io/fs.globWithLimit" -> "path.Split"
  "io/fs.globWithLimit" -> "io/fs.cleanGlobPath"
  "io/fs.globWithLimit" -> "io/fs.hasMeta"
  "io/fs.ReadDir" -> "errors.New"
  "io/fs.ReadDir" -> "sort.Slice"
  "io/fs.glob" -> "io/fs.ReadDir"
  "io/fs.glob" -> "path.Match"
  "path.Clean" -> "(*path.lazybuf).append"
  "path.Clean" -> "(*path.lazybuf).index"
  "path.Clean" -> "(*path.lazybuf).append"
  "path.Clean" -> "(*path.lazybuf).append"
  "path.Clean" -> "(*path.lazybuf).append"
  "path.Clean" -> "(*path.lazybuf).append"
  "path.Clean" -> "(*path.lazybuf).append"
  "path.Clean" -> "(*path.lazybuf).string"
  "path.Join" -> "path.Clean"
  "io/fs.glob" -> "path.Join"
  "io/fs.globWithLimit" -> "io/fs.glob"
  "io/fs.globWithLimit" -> "io/fs.globWithLimit"
  "io/fs.globWithLimit" -> "io/fs.glob"
  "io/fs.Glob" -> "io/fs.globWithLimit"
  "(*io/fs.subFS).Glob" -> "io/fs.Glob"
  "(*io/fs.subFS).Glob" -> "(*io/fs.subFS).shorten"
  "(*io/fs.subFS).fixErr" -> "(*io/fs.subFS).shorten"
  "(*io/fs.subFS).Glob" -> "(*io/fs.subFS).fixErr"
  "(*io/fs.subFS).Glob" -> "errors.New"
  "io/fs.ValidPath" -> "unicode/utf8.ValidString"
  "(*io/fs.subFS).fullName" -> "io/fs.ValidPath"
  "(*io/fs.subFS).fullName" -> "errors.New"
  "(*io/fs.subFS).fullName" -> "path.Join"
  "(*io/fs.subFS).Sub" -> "(*io/fs.subFS).fullName"
  "(*fmt.pp).WriteString" -> "(*fmt.buffer).writeString"
  "(*internal/poll.FD).SetsockoptInt" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptInt" -> "(*internal/poll.FD).decref"
  "syscall.SetsockoptInt" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptInt" -> "syscall.SetsockoptInt"
  "time.when" -> "time.runtimeNano"
  "time.when" -> "time.runtimeNano"
  "(*time.Ticker).Reset" -> "time.when"
  "(*time.Ticker).Reset" -> "time.modTimer"
  "(*bytes.Buffer).Truncate" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).Truncate" -> "(*bytes.Buffer).Len"
  "syscall.wait4" -> "syscall.Syscall6"
  "syscall.wait4" -> "syscall.errnoErr"
  "(*runtime/internal/atomic.Uint64).LoadAcquire" -> "runtime/internal/atomic.LoadAcq64"
  "(*runtime/internal/atomic.Uint32).Add" -> "runtime/internal/atomic.Xadd"
  "runtime/pprof.writeProfileInternal" -> "sort.Slice"
  "compress/gzip.NewWriterLevel" -> "fmt.Errorf"
  "(*compress/flate.compressor).reset" -> "(*compress/flate.huffmanBitWriter).reset"
  "(*compress/flate.deflateFast).reset" -> "(*compress/flate.deflateFast).shiftOffsets"
  "(*compress/flate.compressor).reset" -> "(*compress/flate.deflateFast).reset"
  "(*compress/flate.Writer).Reset" -> "(*compress/flate.compressor).reset"
  "(*compress/flate.compressor).fillWindow" -> "compress/flate.bulkHash4"
  "(*compress/flate.Writer).Reset" -> "(*compress/flate.compressor).fillWindow"
  "(*compress/flate.Writer).Reset" -> "(*compress/flate.compressor).reset"
  "(*compress/gzip.Writer).init" -> "(*compress/flate.Writer).Reset"
  "compress/gzip.NewWriterLevel" -> "(*compress/gzip.Writer).init"
  "runtime/pprof.newProfileBuilder" -> "compress/gzip.NewWriterLevel"
  "runtime/pprof.newProfileBuilder" -> "time.Now"
  "(*sync/atomic.Value).Load" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).Load" -> "sync/atomic.LoadPointer"
  "internal/testlog.Logger" -> "(*sync/atomic.Value).Load"
  "internal/testlog.Open" -> "internal/testlog.Logger"
  "os.OpenFile" -> "internal/testlog.Open"
  "internal/testlog.Stat" -> "internal/testlog.Logger"
  "os.Stat" -> "internal/testlog.Stat"
  "os.statNolog" -> "os.ignoringEINTR"
  "os.fillFileStatFromSys" -> "os.basename"
  "os.fillFileStatFromSys" -> "(*syscall.Timespec).Unix"
  "time.Unix" -> "time.unixTime"
  "os.fillFileStatFromSys" -> "time.Unix"
  "os.statNolog" -> "os.fillFileStatFromSys"
  "os.Stat" -> "os.statNolog"
  "os.openFileNolog" -> "os.Stat"
  "os.underlyingErrorIs" -> "os.underlyingError"
  "os.underlyingErrorIs" -> "(syscall.Errno).Is"
  "os.IsNotExist" -> "os.underlyingErrorIs"
  "os.openFileNolog" -> "os.IsNotExist"
  "os.openFileNolog" -> "os.syscallMode"
  "os.openFileNolog" -> "syscall.Open"
  "os.setStickyBit" -> "os.Stat"
  "os.chmod" -> "os.fixLongPath"
  "os.chmod" -> "os.ignoringEINTR"
  "os.Chmod" -> "os.chmod"
  "os.setStickyBit" -> "os.Chmod"
  "os.setStickyBit" -> "(*os.fileStat).Mode"
  "os.openFileNolog" -> "os.setStickyBit"
  "syscall.CloseOnExec" -> "syscall.fcntl"
  "os.openFileNolog" -> "syscall.CloseOnExec"
  "os.openFileNolog" -> "os.newFile"
  "os.OpenFile" -> "os.openFileNolog"
  "os.Open" -> "os.OpenFile"
  "os.ReadFile" -> "os.Open"
  "(*os.File).Close" -> "(*os.file).close"
  "os.ReadFile" -> "(*os.File).Close"
  "(*internal/poll.FD).Fstat" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fstat" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fstat" -> "internal/poll.ignoringEINTR"
  "(*os.File).Stat" -> "(*internal/poll.FD).Fstat"
  "(*os.File).Stat" -> "os.fillFileStatFromSys"
  "os.ReadFile" -> "(*os.File).Stat"
  "(*os.File).Read" -> "(*os.File).checkValid"
  "(*internal/poll.FD).Read" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).Read" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).Read" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).Read" -> "internal/poll.ignoringEINTRIO"
  "(*internal/poll.FD).Read" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).Read" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).Read" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).read" -> "(*internal/poll.FD).Read"
  "(*os.File).read" -> "runtime.KeepAlive"
  "(*os.File).Read" -> "(*os.File).read"
  "(*os.File).Read" -> "(*os.File).wrapErr"
  "os.ReadFile" -> "(*os.File).Read"
  "os.ReadFile" -> "(*os.fileStat).Size"
  "(*runtime/pprof.profileBuilder).readMapping" -> "os.ReadFile"
  "bytes.Index" -> "bytes.IndexByte"
  "bytes.Index" -> "bytes.Equal"
  "bytes.Index" -> "internal/bytealg.Index"
  "bytes.Index" -> "bytes.IndexByte"
  "bytes.Index" -> "internal/bytealg.Cutover"
  "bytes.Index" -> "bytes.Equal"
  "bytes.Index" -> "internal/bytealg.Index"
  "bytes.Index" -> "bytes.IndexByte"
  "bytes.Index" -> "bytes.Equal"
  "internal/bytealg.IndexRabinKarpBytes" -> "internal/bytealg.HashStrBytes"
  "internal/bytealg.IndexRabinKarpBytes" -> "internal/bytealg.Equal"
  "internal/bytealg.IndexRabinKarpBytes" -> "internal/bytealg.Equal"
  "bytes.Index" -> "internal/bytealg.IndexRabinKarpBytes"
  "bytes.Cut" -> "bytes.Index"
  "runtime/pprof.parseProcSelfMaps" -> "bytes.Cut"
  "runtime/pprof.parseProcSelfMaps$1" -> "bytes.Cut"
  "bytes.TrimLeft" -> "bytes.trimLeftByte"
  "bytes.TrimLeft" -> "bytes.makeASCIISet"
  "bytes.trimLeftASCII" -> "(*bytes.asciiSet).contains"
  "bytes.TrimLeft" -> "bytes.trimLeftASCII"
  "bytes.trimLeftUnicode" -> "unicode/utf8.DecodeRune"
  "bytes.trimLeftUnicode" -> "bytes.containsRune"
  "bytes.TrimLeft" -> "bytes.trimLeftUnicode"
  "runtime/pprof.parseProcSelfMaps$1" -> "bytes.TrimLeft"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "strings.Cut" -> "strings.Index"
  "runtime/pprof.parseProcSelfMaps" -> "strings.Cut"
  "runtime/pprof.parseProcSelfMaps" -> "strconv.ParseUint"
  "runtime/pprof.parseProcSelfMaps" -> "strconv.ParseUint"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "strconv.ParseUint"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.elfBuildID" -> "os.Open"
  "runtime/pprof.elfBuildID" -> "(*os.File).Close"
  "(*os.File).ReadAt" -> "(*os.File).checkValid"
  "(*os.File).ReadAt" -> "errors.New"
  "(*internal/poll.FD).Pread" -> "(*internal/poll.FD).incref"
  "syscall.pread" -> "syscall.Syscall6"
  "syscall.pread" -> "syscall.errnoErr"
  "syscall.Pread" -> "syscall.pread"
  "syscall.Pread" -> "internal/race.WriteRange"
  "syscall.Pread" -> "internal/race.Acquire"
  "syscall.Pread" -> "syscall.msanWrite"
  "syscall.Pread" -> "syscall.asanWrite"
  "(*internal/poll.FD).Pread" -> "syscall.Pread"
  "(*internal/poll.FD).Pread" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Pread" -> "(*internal/poll.FD).eofError"
  "(*os.File).pread" -> "(*internal/poll.FD).Pread"
  "(*os.File).pread" -> "runtime.KeepAlive"
  "(*os.File).ReadAt" -> "(*os.File).pread"
  "(*os.File).ReadAt" -> "(*os.File).wrapErr"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "fmt.Sprintf"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.elfBuildID"
  "(*runtime/pprof.profileBuilder).addMapping" -> "(*runtime/pprof.profileBuilder).addMappingEntry"
  "runtime/pprof.parseProcSelfMaps" -> "(*runtime/pprof.profileBuilder).addMapping"
  "(*runtime/pprof.profileBuilder).readMapping" -> "runtime/pprof.parseProcSelfMaps"
  "(*runtime/pprof.profileBuilder).readMapping" -> "(*runtime/pprof.profileBuilder).addMappingEntry"
  "runtime/pprof.newProfileBuilder" -> "(*runtime/pprof.profileBuilder).readMapping"
  "runtime/pprof.printCountCycleProfile" -> "runtime/pprof.newProfileBuilder"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.protobuf).int64Opt" -> "(*runtime/pprof.protobuf).int64"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountCycleProfile" -> "runtime/pprof.runtime_cyclesPerSecond"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime.StackRecord).Stack"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).reset"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "runtime/pprof.runtime_expandFinalInlineFrame"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.pcDeck).reset"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.protobuf).uint64Opt" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).pbLine"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).endMessage"
  "hash/crc32.Update" -> "sync/atomic.LoadUint32"
  "hash/crc32.Update" -> "(*sync.Once).Do"
  "hash/crc32.Update" -> "hash/crc32.simpleUpdate"
  "hash/crc32.archUpdateIEEE" -> "hash/crc32.ieeeCLMUL"
  "hash/crc32.slicingUpdate" -> "hash/crc32.simpleUpdate"
  "hash/crc32.archUpdateIEEE" -> "hash/crc32.slicingUpdate"
  "hash/crc32.Update" -> "hash/crc32.archUpdateIEEE"
  "hash/crc32.ieeeInit$1" -> "hash/crc32.slicingUpdate"
  "hash/crc32.Update" -> "hash/crc32.ieeeInit$1"
  "(*compress/gzip.Writer).Write" -> "hash/crc32.Update"
  "(*compress/flate.compressor).store" -> "(*compress/flate.compressor).writeStoredBlock"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).store"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "compress/flate.histogram"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).generateCodegen"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).dynamicSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).dynamicSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).dynamicSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).dynamicSize"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).storedSize"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeCode" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeDynamicHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.compressor).storeHuff" -> "(*compress/flate.huffmanBitWriter).writeBlockHuff"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).storeHuff"
  "(*compress/flate.deflateFast).encode" -> "(*compress/flate.deflateFast).shiftOffsets"
  "compress/flate.emitLiteral" -> "compress/flate.literalToken"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.emitLiteral"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.load32"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.load32"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.emitLiteral"
  "(*compress/flate.deflateFast).encode" -> "(*compress/flate.deflateFast).matchLen"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.matchToken"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.load64"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.emitLiteral"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.deflateFast).encode"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.deflateFast).reset"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.compressor).writeStoredBlock"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.huffmanBitWriter).writeBlockHuff"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.huffmanBitWriter).writeBlockHuff"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(compress/flate.token).literal"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(compress/flate.token).length"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(compress/flate.token).offset"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "compress/flate.lengthCode"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "compress/flate.offsetCode"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).indexTokens"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).generateCodegen"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).dynamicSize"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).storedSize"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeDynamicHeader"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(compress/flate.token).literal"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(compress/flate.token).length"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "compress/flate.lengthCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(compress/flate.token).offset"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "compress/flate.offsetCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeTokens"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.huffmanBitWriter).writeBlockDynamic"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).encSpeed"
  "(*compress/flate.compressor).deflate" -> "compress/flate.literalToken"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).indexTokens"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).storedSize"
  "(*compress/flate.huffmanBitWriter).fixedSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).fixedSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).fixedSize"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).generateCodegen"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).dynamicSize"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.huffmanBitWriter).writeFixedHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeFixedHeader"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeTokens"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeDynamicHeader"
  "(*compress/flate.compressor).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeBlock"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).writeBlock"
  "(*compress/flate.compressor).deflate" -> "compress/flate.hash4"
  "(*compress/flate.compressor).findMatch" -> "compress/flate.matchLen"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).findMatch"
  "(*compress/flate.compressor).deflate" -> "compress/flate.matchToken"
  "(*compress/flate.compressor).deflate" -> "compress/flate.matchToken"
  "(*compress/flate.compressor).deflate" -> "compress/flate.hash4"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).writeBlock"
  "(*compress/flate.compressor).deflate" -> "compress/flate.literalToken"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).writeBlock"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).deflate"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).fillStore"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).fillDeflate"
  "(*compress/flate.Writer).Write" -> "(*compress/flate.compressor).write"
  "(*compress/gzip.Writer).Write" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).Write" -> "time.Unix"
  "(time.Time).After" -> "(*time.Time).sec"
  "(time.Time).After" -> "(*time.Time).sec"
  "(time.Time).After" -> "(*time.Time).nsec"
  "(time.Time).After" -> "(*time.Time).nsec"
  "(*compress/gzip.Writer).Write" -> "(time.Time).After"
  "(time.Time).Unix" -> "(*time.Time).unixSec"
  "(*compress/gzip.Writer).Write" -> "(time.Time).Unix"
  "(*compress/gzip.Writer).Write" -> "(encoding/binary.littleEndian).PutUint32"
  "(*compress/gzip.Writer).writeBytes" -> "errors.New"
  "(*compress/gzip.Writer).writeBytes" -> "(encoding/binary.littleEndian).PutUint16"
  "(*compress/gzip.Writer).writeBytes" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*os.File).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/gzip.Writer).writeBytes"
  "(*compress/gzip.Writer).writeString" -> "errors.New"
  "(*os.File).WriteString" -> "(*os.File).Write"
  "io.WriteString" -> "(*os.File).WriteString"
  "io.WriteString" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeString" -> "io.WriteString"
  "(*compress/gzip.Writer).writeString" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeString" -> "(*os.File).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/gzip.Writer).writeString"
  "(*compress/gzip.Writer).Write" -> "(*compress/gzip.Writer).writeString"
  "compress/flate.newHuffmanBitWriter" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.newHuffmanBitWriter" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.newHuffmanBitWriter" -> "compress/flate.newHuffmanEncoder"
  "(*compress/flate.compressor).init" -> "compress/flate.newHuffmanBitWriter"
  "(*compress/flate.compressor).init" -> "compress/flate.newDeflateFast"
  "(*compress/flate.compressor).init" -> "(*compress/flate.compressor).initDeflate"
  "(*compress/flate.compressor).init" -> "fmt.Errorf"
  "compress/flate.NewWriter" -> "(*compress/flate.compressor).init"
  "(*compress/gzip.Writer).Write" -> "compress/flate.NewWriter"
  "(*compress/gzip.Writer).Write" -> "(*os.File).Write"
  "(*runtime/pprof.profileBuilder).flush" -> "(*compress/gzip.Writer).Write"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).flush"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "runtime/pprof.allFrames" -> "runtime.CallersFrames"
  "runtime/pprof.allFrames" -> "(*runtime.Frames).Next"
  "runtime/pprof.allFrames" -> "(*runtime.Frames).Next"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "runtime/pprof.allFrames"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).tryAdd"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).tryAdd"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).tryAdd"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.protobuf).int64s" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).int64s" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.protobuf).int64s" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).int64s"
  "(*runtime/pprof.protobuf).uint64s" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).uint64s" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.protobuf).uint64s" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).uint64s"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.profileBuilder).flush"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).endMessage"
  "runtime/pprof.printCountProfile$2" -> "(*runtime/pprof.profileBuilder).pbLabel"
  "runtime/pprof.printCountProfile$2" -> "(*runtime/pprof.runtimeProfile).Label"
  "runtime/pprof.printCountProfile$2" -> "(runtime/pprof.stackProfile).Label"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime/pprof.printCountProfile$2"
  "(*runtime/pprof.profileBuilder).build$1" -> "(*runtime/pprof.profileBuilder).pbLabel"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.profileBuilder).build$1"
  "runtime/pprof.writeHeapProto$1" -> "(*runtime/pprof.profileBuilder).pbLabel"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime/pprof.writeHeapProto$1"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbSample"
  "(*runtime/pprof.profileBuilder).build" -> "time.Now"
  "(time.Time).UnixNano" -> "(*time.Time).unixSec"
  "(time.Time).UnixNano" -> "(*time.Time).nsec"
  "(*runtime/pprof.profileBuilder).build" -> "(time.Time).UnixNano"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.profileBuilder).build" -> "(time.Time).Sub"
  "(*runtime/pprof.profileBuilder).build" -> "(time.Duration).Nanoseconds"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbSample"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.protobuf).bool" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.protobuf).bool" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).bool"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbMapping"
  "(*runtime/pprof.protobuf).string" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.protobuf).strings" -> "(*runtime/pprof.protobuf).string"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).strings"
  "(*runtime/pprof.profileBuilder).build" -> "(*compress/gzip.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*compress/gzip.Writer).Write"
  "(*compress/flate.compressor).close" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.compressor).close" -> "(*compress/flate.huffmanBitWriter).flush"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).store"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).storeHuff"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).encSpeed"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).deflate"
  "(*compress/flate.Writer).Close" -> "(*compress/flate.compressor).close"
  "(*compress/gzip.Writer).Close" -> "(*compress/flate.Writer).Close"
  "(*compress/gzip.Writer).Close" -> "(encoding/binary.littleEndian).PutUint32"
  "(*compress/gzip.Writer).Close" -> "(encoding/binary.littleEndian).PutUint32"
  "(*compress/gzip.Writer).Close" -> "(*os.File).Write"
  "(*runtime/pprof.profileBuilder).build" -> "(*compress/gzip.Writer).Close"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.printCountCycleProfile" -> "runtime/pprof.scaleBlockProfile"
  "runtime/pprof.scaleMutexProfile" -> "runtime.SetMutexProfileFraction"
  "runtime/pprof.printCountCycleProfile" -> "runtime/pprof.scaleMutexProfile"
  "runtime/pprof.writeProfileInternal" -> "runtime/pprof.printCountCycleProfile"
  "bufio.NewWriter" -> "bufio.NewWriterSize"
  "runtime/pprof.writeProfileInternal" -> "bufio.NewWriter"
  "(*text/tabwriter.Writer).Init" -> "(*text/tabwriter.Writer).reset"
  "text/tabwriter.NewWriter" -> "(*text/tabwriter.Writer).Init"
  "runtime/pprof.writeProfileInternal" -> "text/tabwriter.NewWriter"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "runtime/pprof.runtime_cyclesPerSecond"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "runtime.SetMutexProfileFraction"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprint"
  "runtime/pprof.writeProfileInternal" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.printStackRecord" -> "runtime.CallersFrames"
  "runtime/pprof.printStackRecord" -> "(*runtime.Frames).Next"
  "runtime/pprof.printStackRecord" -> "fmt.Fprintf"
  "runtime/pprof.printStackRecord" -> "fmt.Fprintf"
  "runtime/pprof.printStackRecord" -> "strings.HasPrefix"
  "runtime/pprof.printStackRecord" -> "runtime/pprof.printStackRecord"
  "runtime/pprof.printStackRecord" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "runtime/pprof.printStackRecord"
  "(*text/tabwriter.Writer).flush" -> "(*text/tabwriter.Writer).handlePanic"
  "(*text/tabwriter.Writer).flush" -> "(*text/tabwriter.Writer).flushNoDefers"
  "(*text/tabwriter.Writer).Flush" -> "(*text/tabwriter.Writer).flush"
  "runtime/pprof.writeProfileInternal" -> "(*text/tabwriter.Writer).Flush"
  "runtime/pprof.writeProfileInternal" -> "(*bufio.Writer).Flush"
  "runtime/pprof.writeProfileInternal" -> "runtime.BlockProfile"
  "runtime/pprof.writeProfileInternal" -> "runtime.MutexProfile"
  "runtime/pprof.writeProfileInternal" -> "runtime.BlockProfile"
  "runtime/pprof.writeProfileInternal" -> "runtime.MutexProfile"
  "(*bytes.Buffer).ReadByte" -> "(*bytes.Buffer).empty"
  "(*bytes.Buffer).ReadByte" -> "(*bytes.Buffer).Reset"
  "syscall.sendto" -> "syscall.Syscall6"
  "syscall.sendto" -> "syscall.errnoErr"
  "fmt.Sprintln" -> "fmt.newPrinter"
  "fmt.Sprintln" -> "(*fmt.pp).doPrintln"
  "fmt.Sprintln" -> "(*fmt.pp).free"
  "io.Copy" -> "io.copyBuffer"
  "(*os.File).Seek" -> "(*os.File).checkValid"
  "(*os.File).seek" -> "(*os.dirInfo).close"
  "(*internal/poll.FD).Seek" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Seek" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Seek" -> "syscall.Seek"
  "(*os.File).seek" -> "(*internal/poll.FD).Seek"
  "(*os.File).seek" -> "runtime.KeepAlive"
  "(*os.File).Seek" -> "(*os.File).seek"
  "(*os.File).Seek" -> "(*os.File).wrapErr"
  "context.init" -> "errors.init"
  "context.init" -> "internal/reflectlite.init"
  "context.init" -> "sync.init"
  "context.init" -> "sync/atomic.init"
  "context.init" -> "time.init"
  "context.init" -> "errors.New"
  "context.init" -> "context.init#1"
  "context.contextName" -> "internal/reflectlite.TypeOf"
  "(*internal/reflectlite.rtype).nameOff" -> "internal/reflectlite.resolveNameOff"
  "(*internal/reflectlite.rtype).String" -> "(*internal/reflectlite.rtype).nameOff"
  "(*internal/reflectlite.rtype).String" -> "(internal/reflectlite.name).name"
  "context.contextName" -> "(*internal/reflectlite.rtype).String"
  "(*context.cancelCtx).String" -> "context.contextName"
  "time.div" -> "(*time.Time).nsec"
  "time.div" -> "(*time.Time).sec"
  "(*sync.Map).Load" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).Load" -> "(*sync.Mutex).Lock"
  "(*sync.Map).Load" -> "(*sync/atomic.Value).Load"
  "(*sync/atomic.Value).Store" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.runtime_procPin"
  "(*sync/atomic.Value).Store" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).Store" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).Store" -> "sync/atomic.StorePointer"
  "(*sync.Map).missLocked" -> "(*sync/atomic.Value).Store"
  "(*sync.Map).Load" -> "(*sync.Map).missLocked"
  "(*sync.Map).Load" -> "(*sync.Mutex).Unlock"
  "(*sync.entry).load" -> "sync/atomic.LoadPointer"
  "(*sync.Map).Load" -> "(*sync.entry).load"
  "(*runtime/internal/atomic.Uint32).StoreRelease" -> "runtime/internal/atomic.StoreRel"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).writeSlice"
  "io.ReadFull" -> "io.ReadAtLeast"
  "(*compress/flate.decompressor).copyData" -> "io.ReadFull"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).writeMark"
  "(*compress/flate.decompressor).copyData" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).availWrite"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).finishBlock" -> "(*compress/flate.dictDecoder).availRead"
  "(*compress/flate.decompressor).finishBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.decompressor).finishBlock"
  "(time.Time).Day" -> "(time.Time).date"
  "syscall.Uname" -> "syscall.RawSyscall"
  "syscall.Uname" -> "syscall.errnoErr"
  "(*bufio.Writer).WriteByte" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteByte" -> "(*bufio.Writer).Flush"
  "(*compress/gzip.Reader).readHeader" -> "io.ReadFull"
  "(*compress/gzip.Reader).readHeader" -> "(encoding/binary.littleEndian).Uint32"
  "(*compress/gzip.Reader).readHeader" -> "time.Unix"
  "hash/crc32.ChecksumIEEE" -> "(*sync.Once).Do"
  "hash/crc32.ChecksumIEEE" -> "hash/crc32.archUpdateIEEE"
  "hash/crc32.ChecksumIEEE" -> "hash/crc32.ieeeInit$1"
  "(*compress/gzip.Reader).readHeader" -> "hash/crc32.ChecksumIEEE"
  "(*compress/gzip.Reader).readHeader" -> "io.ReadFull"
  "(*compress/gzip.Reader).readHeader" -> "compress/gzip.noEOF"
  "(*compress/gzip.Reader).readHeader" -> "hash/crc32.Update"
  "(*compress/gzip.Reader).readHeader" -> "(encoding/binary.littleEndian).Uint16"
  "(*compress/gzip.Reader).readHeader" -> "io.ReadFull"
  "(*compress/gzip.Reader).readHeader" -> "compress/gzip.noEOF"
  "(*compress/gzip.Reader).readHeader" -> "hash/crc32.Update"
  "(*compress/gzip.Reader).readString" -> "hash/crc32.Update"
  "(*compress/gzip.Reader).readHeader" -> "(*compress/gzip.Reader).readString"
  "(*compress/gzip.Reader).readHeader" -> "compress/gzip.noEOF"
  "(*compress/gzip.Reader).readHeader" -> "(*compress/gzip.Reader).readString"
  "(*compress/gzip.Reader).readHeader" -> "compress/gzip.noEOF"
  "(*compress/gzip.Reader).readHeader" -> "io.ReadFull"
  "(*compress/gzip.Reader).readHeader" -> "compress/gzip.noEOF"
  "(*compress/gzip.Reader).readHeader" -> "(encoding/binary.littleEndian).Uint16"
  "compress/flate.fixedHuffmanDecoderInit" -> "(*sync.Once).Do"
  "compress/flate.NewReader" -> "compress/flate.fixedHuffmanDecoderInit"
  "bufio.NewReaderSize" -> "(*bufio.Reader).reset"
  "bufio.NewReader" -> "bufio.NewReaderSize"
  "compress/flate.makeReader" -> "bufio.NewReader"
  "compress/flate.NewReader" -> "compress/flate.makeReader"
  "compress/flate.NewReader" -> "(*compress/flate.dictDecoder).init"
  "(*compress/gzip.Reader).readHeader" -> "compress/flate.NewReader"
  "(*compress/gzip.Reader).Reset" -> "(*compress/gzip.Reader).readHeader"
  "(*compress/gzip.Reader).Reset" -> "bufio.NewReader"
  "syscall.recvfrom" -> "syscall.Syscall6"
  "syscall.recvfrom" -> "syscall.errnoErr"
  "syscall.Recvfrom" -> "syscall.recvfrom"
  "syscall.Recvfrom" -> "syscall.anyToSockaddr"
  "syscall.recvmsgRaw" -> "(*syscall.Iovec).SetLen"
  "syscall.recvmsg" -> "syscall.Syscall"
  "syscall.recvmsg" -> "syscall.errnoErr"
  "syscall.recvmsgRaw" -> "syscall.recvmsg"
  "syscall.getsockopt" -> "syscall.Syscall6"
  "syscall.getsockopt" -> "syscall.errnoErr"
  "syscall.GetsockoptInt" -> "syscall.getsockopt"
  "syscall.recvmsgRaw" -> "syscall.GetsockoptInt"
  "syscall.recvmsgRaw" -> "(*syscall.Msghdr).SetControllen"
  "syscall.recvmsgRaw" -> "(*syscall.Iovec).SetLen"
  "syscall.Recvmsg" -> "syscall.recvmsgRaw"
  "syscall.Recvmsg" -> "syscall.anyToSockaddr"
  "(time.Time).Minute" -> "(time.Time).abs"
  "(*runtime/internal/atomic.Uint8).Load" -> "runtime/internal/atomic.Load8"
  "(*runtime/internal/atomic.Bool).Load" -> "(*runtime/internal/atomic.Uint8).Load"
  "(*bufio.Reader).ReadRune" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).ReadRune" -> "unicode/utf8.FullRune"
  "(*bufio.Reader).ReadRune" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*os.rawConn).Write" -> "(*os.File).checkValid"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.pollDesc).waitWrite"
  "(*os.rawConn).Write" -> "(*internal/poll.FD).RawWrite"
  "(*os.rawConn).Write" -> "runtime.KeepAlive"
  "(*sync.Map).Range" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).Range" -> "(*sync.Mutex).Lock"
  "(*sync.Map).Range" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).Range" -> "(*sync/atomic.Value).Store"
  "(*sync.Map).Range" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).Range" -> "(*sync.entry).load"
  "(*flag.FlagSet).BoolVar" -> "flag.newBoolValue"
  "(*flag.FlagSet).BoolVar" -> "(*flag.FlagSet).Var"
  "(*flag.FlagSet).Bool" -> "(*flag.FlagSet).BoolVar"
  "(*os.fileStat).IsDir" -> "(*os.fileStat).Mode"
  "(*os.fileStat).IsDir" -> "(io/fs.FileMode).IsDir"
  "(*log.Logger).SetFlags" -> "(*sync.Mutex).Lock"
  "(*log.Logger).SetFlags" -> "(*sync.Mutex).Unlock"
  "(*sync.Mutex).TryLock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).TryLock" -> "internal/race.Acquire"
  "(*os.File).readdir" -> "(*sync.Pool).Get"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).ReadDirent" -> "internal/poll.ignoringEINTRIO"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).readdir" -> "(*internal/poll.FD).ReadDirent"
  "(*os.File).readdir" -> "runtime.KeepAlive"
  "os.readInt" -> "os.readIntBE"
  "os.readInt" -> "os.readIntLE"
  "os.direntReclen" -> "os.readInt"
  "(*os.File).readdir" -> "os.direntReclen"
  "os.direntIno" -> "os.readInt"
  "(*os.File).readdir" -> "os.direntIno"
  "os.direntNamlen" -> "os.direntReclen"
  "(*os.File).readdir" -> "os.direntNamlen"
  "(*os.File).readdir" -> "os.direntType"
  "os.newUnixDirent" -> "(io/fs.FileMode).Type"
  "os.Lstat" -> "internal/testlog.Stat"
  "os.lstatNolog" -> "os.ignoringEINTR"
  "os.lstatNolog" -> "os.fillFileStatFromSys"
  "os.Lstat" -> "os.lstatNolog"
  "os.newUnixDirent" -> "os.Lstat"
  "os.newUnixDirent" -> "(*os.fileStat).Mode"
  "(*os.File).readdir" -> "os.newUnixDirent"
  "(*os.File).readdir" -> "os.IsNotExist"
  "(*os.File).readdir" -> "os.IsNotExist"
  "(*os.File).readdir" -> "os.Lstat"
  "(*os.File).ReadDir" -> "(*os.File).readdir"
  "(*log.Logger).Output" -> "time.Now"
  "(*log.Logger).Output" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Output" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).Output" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).Output" -> "runtime.Caller"
  "(*log.Logger).formatHeader" -> "(time.Time).UTC"
  "(time.Time).Date" -> "(time.Time).date"
  "(*log.Logger).formatHeader" -> "(time.Time).Date"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(time.Time).Clock" -> "(time.Time).abs"
  "(time.Time).Clock" -> "time.absClock"
  "(*log.Logger).formatHeader" -> "(time.Time).Clock"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "(time.Time).Nanosecond"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).Output" -> "(*log.Logger).formatHeader"
  "(*log.Logger).Output" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Output" -> "(*os.File).Write"
  "runtime/pprof.writeGoroutineStacks" -> "runtime.Stack"
  "(*log.Logger).Flags" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Flags" -> "(*sync.Mutex).Unlock"
  "(*os.Process).blockUntilWaitable" -> "syscall.Syscall6"
  "(*os.Process).blockUntilWaitable" -> "runtime.KeepAlive"
  "(*os.Process).blockUntilWaitable" -> "os.NewSyscallError"
  "(*runtime/internal/atomic.Uintptr).Load" -> "runtime/internal/atomic.Loaduintptr"
  "(*math/rand.lockedSource).seedPos" -> "(*sync.Mutex).Lock"
  "(*math/rand.rngSource).Seed" -> "math/rand.seedrand"
  "(*math/rand.rngSource).Seed" -> "math/rand.seedrand"
  "(*math/rand.rngSource).Seed" -> "math/rand.seedrand"
  "(*math/rand.lockedSource).seedPos" -> "(*math/rand.rngSource).Seed"
  "(*math/rand.lockedSource).seedPos" -> "(*sync.Mutex).Unlock"
  "(*math/rand.Rand).Seed" -> "(*math/rand.lockedSource).seedPos"
  "(sort.IntSlice).Sort" -> "sort.Sort"
  "(*runtime/internal/atomic.Int32).Load" -> "runtime/internal/atomic.Loadint32"
  "(*flag.FlagSet).Float64Var" -> "flag.newFloat64Value"
  "(*flag.FlagSet).Float64Var" -> "(*flag.FlagSet).Var"
  "(*flag.FlagSet).UintVar" -> "flag.newUintValue"
  "(*flag.FlagSet).UintVar" -> "(*flag.FlagSet).Var"
  "(*sync.copyChecker).check" -> "sync/atomic.CompareAndSwapUintptr"
  "(*sync.Cond).Broadcast" -> "(*sync.copyChecker).check"
  "(*sync.Cond).Broadcast" -> "sync.runtime_notifyListNotifyAll"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadMsgInet4" -> "internal/syscall/unix.RecvmsgInet4"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.pollDesc).pollable"
  "runtime/pprof.countThreadCreate" -> "runtime.ThreadCreateProfile"
  "internal/reflectlite.methodName" -> "runtime.Caller"
  "internal/reflectlite.methodName" -> "runtime.FuncForPC"
  "internal/reflectlite.methodName" -> "(*runtime.Func).Name"
  "(internal/reflectlite.flag).mustBeExported" -> "internal/reflectlite.methodName"
  "(internal/reflectlite.flag).mustBeExported" -> "internal/reflectlite.methodName"
  "(*math/rand.Rand).Uint32" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).int31n" -> "(*math/rand.Rand).Uint32"
  "(*math/rand.Rand).int31n" -> "(*math/rand.Rand).Uint32"
  "(*math/rand.Rand).Int" -> "(*math/rand.Rand).Int63"
  "(os.dirFS).Stat" -> "io/fs.ValidPath"
  "(os.dirFS).Stat" -> "os.Stat"
  "(os.dirFS).Stat" -> "os.containsAny"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadFrom" -> "syscall.Recvfrom"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.pollDesc).pollable"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadMsgInet6" -> "internal/syscall/unix.RecvmsgInet6"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.pollDesc).pollable"
  "time.getnum3" -> "time.isDigit"
  "(*sync/atomic.Uint32).Store" -> "sync/atomic.StoreUint32"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).uncommon"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).isExported"
  "(*internal/reflectlite.rtype).typeOff" -> "internal/reflectlite.resolveTypeOff"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).typeOff"
  "(internal/reflectlite.name).pkgPath" -> "(internal/reflectlite.name).readVarint"
  "(internal/reflectlite.name).pkgPath" -> "(internal/reflectlite.name).hasTag"
  "(internal/reflectlite.name).pkgPath" -> "(internal/reflectlite.name).data"
  "(internal/reflectlite.name).pkgPath" -> "(internal/reflectlite.name).readVarint"
  "(internal/reflectlite.name).pkgPath" -> "(internal/reflectlite.name).data"
  "(internal/reflectlite.name).pkgPath" -> "internal/reflectlite.resolveTypeOff"
  "(internal/reflectlite.name).pkgPath" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).pkgPath"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).pkgPath"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "(*internal/reflectlite.uncommonType).methods" -> "internal/reflectlite.add"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.uncommonType).methods"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).isExported"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).pkgPath"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).pkgPath"
  "internal/reflectlite.implements" -> "(*internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.name).name"
  "(*internal/reflectlite.rtype).Implements" -> "internal/reflectlite.implements"
  "(*sync.entry).storeLocked" -> "sync/atomic.StorePointer"
  "(*internal/poll.pollDesc).waitCanceled" -> "internal/poll.runtime_pollWaitCanceled"
  "(*runtime/internal/atomic.Uint32).Store" -> "runtime/internal/atomic.Store"
  "(time.Time).MarshalBinary" -> "(time.Time).Location"
  "(time.Time).MarshalBinary" -> "(*time.Time).sec"
  "(time.Time).MarshalBinary" -> "(*time.Time).nsec"
  "(time.Time).Zone" -> "(*time.Time).unixSec"
  "(time.Time).Zone" -> "(*time.Location).lookup"
  "(time.Time).MarshalBinary" -> "(time.Time).Zone"
  "(time.Time).MarshalBinary" -> "errors.New"
  "(syscall.Errno).Temporary" -> "(syscall.Errno).Timeout"
  "runtime/pprof.StartCPUProfile" -> "(*sync.Mutex).Lock"
  "runtime/pprof.StartCPUProfile" -> "(*sync.Mutex).Unlock"
  "runtime/pprof.StartCPUProfile" -> "fmt.Errorf"
  "runtime/pprof.StartCPUProfile" -> "runtime.SetCPUProfileRate"
  "runtime/pprof.profileWriter" -> "runtime/pprof.newProfileBuilder"
  "runtime/pprof.profileWriter" -> "time.Sleep"
  "runtime/pprof.profileWriter" -> "runtime/pprof.readProfile"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "fmt.Errorf"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "fmt.Errorf"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "fmt.Errorf"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "fmt.Errorf"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "fmt.Errorf"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "internal/abi.FuncPCABIInternal"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "(*runtime/pprof.profMap).lookup"
  "(*runtime/pprof.profileBuilder).addCPUData" -> "fmt.Errorf"
  "runtime/pprof.profileWriter" -> "(*runtime/pprof.profileBuilder).addCPUData"
  "runtime/pprof.profileWriter" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.profileWriter" -> "(*fmt.wrapError).Error"
  "runtime/pprof.profileWriter" -> "(*errors.errorString).Error"
  "runtime/pprof.StartCPUProfile" -> "runtime/pprof.profileWriter"
  "(*flag.int64Value).Set" -> "strconv.ParseInt"
  "(*flag.int64Value).Set" -> "flag.numError"
  "(*bytes.Buffer).readSlice" -> "bytes.IndexByte"
  "(*bytes.Buffer).ReadString" -> "(*bytes.Buffer).readSlice"
  "(*sync/atomic.Bool).Load" -> "sync/atomic.LoadUint32"
  "(*internal/reflectlite.funcType).out" -> "internal/reflectlite.add"
  "(*internal/poll.FD).Fsync" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fsync" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fsync" -> "internal/poll.ignoringEINTR"
  "(*internal/poll.FD).Shutdown" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Shutdown" -> "(*internal/poll.FD).decref"
  "syscall.Shutdown" -> "syscall.Syscall"
  "syscall.Shutdown" -> "syscall.errnoErr"
  "(*internal/poll.FD).Shutdown" -> "syscall.Shutdown"
  "(*bytes.Buffer).ReadFrom" -> "(*bytes.Buffer).grow"
  "(sort.StringSlice).Sort" -> "sort.Sort"
  "(*sync.RWMutex).Unlock" -> "internal/race.Release"
  "(*sync.RWMutex).Unlock" -> "internal/race.Disable"
  "(*sync.RWMutex).Unlock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).Unlock" -> "internal/race.Enable"
  "(*sync.RWMutex).Unlock" -> "sync.fatal"
  "(*sync.RWMutex).Unlock" -> "sync.runtime_Semrelease"
  "(*sync.RWMutex).Unlock" -> "(*sync.Mutex).Unlock"
  "(*sync.RWMutex).Unlock" -> "internal/race.Enable"
  "(*sync/atomic.Uint64).Store" -> "sync/atomic.StoreUint64"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).writeLock"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).writeUnlock"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).readLock"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).readUnlock"
  "internal/syscall/unix.CopyFileRange" -> "syscall.Syscall6"
  "internal/poll.copyFileRange" -> "internal/syscall/unix.CopyFileRange"
  "(*flag.FlagSet).Set" -> "fmt.Errorf"
  "internal/reflectlite.directlyAssignable" -> "(*internal/reflectlite.rtype).hasName"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).Len" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Len"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Len"
  "(*internal/reflectlite.rtype).chanDir" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).chanDir"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalType" -> "internal/reflectlite.haveIdenticalUnderlyingType"
  "(*internal/reflectlite.rtype).Name" -> "(*internal/reflectlite.rtype).hasName"
  "(*internal/reflectlite.rtype).Name" -> "(*internal/reflectlite.rtype).String"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/reflectlite.rtype).Name"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/reflectlite.rtype).Name"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/reflectlite.rtype).common"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/reflectlite.rtype).common"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).chanDir"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).chanDir"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "(*internal/reflectlite.rtype).In" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).In" -> "(*internal/reflectlite.funcType).in"
  "(*internal/reflectlite.rtype).In" -> "internal/reflectlite.toType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).In"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).In"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "(*internal/reflectlite.rtype).NumIn" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).NumIn"
  "(*internal/reflectlite.rtype).Out" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).Out" -> "(*internal/reflectlite.funcType).out"
  "(*internal/reflectlite.rtype).Out" -> "internal/reflectlite.toType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Out"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Out"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "(*internal/reflectlite.rtype).NumOut" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).NumOut" -> "(*internal/reflectlite.funcType).out"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).NumOut"
  "(*internal/reflectlite.rtype).Key" -> "(*internal/reflectlite.rtype).Kind"
  "(*internal/reflectlite.rtype).Key" -> "internal/reflectlite.toType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Key"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Key"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.rtype).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "(internal/reflectlite.name).tag" -> "(internal/reflectlite.name).hasTag"
  "(internal/reflectlite.name).tag" -> "(internal/reflectlite.name).readVarint"
  "(internal/reflectlite.name).tag" -> "(internal/reflectlite.name).readVarint"
  "(internal/reflectlite.name).tag" -> "(internal/reflectlite.name).data"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/reflectlite.name).tag"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/reflectlite.name).tag"
  "(*internal/reflectlite.structField).embedded" -> "(internal/reflectlite.name).embedded"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.structField).embedded"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/reflectlite.structField).embedded"
  "internal/reflectlite.directlyAssignable" -> "internal/reflectlite.haveIdenticalUnderlyingType"
  "internal/reflectlite.directlyAssignable" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.directlyAssignable" -> "(*internal/reflectlite.rtype).Kind"
  "internal/reflectlite.directlyAssignable" -> "(*internal/reflectlite.rtype).hasName"
  "(*internal/reflectlite.rtype).AssignableTo" -> "internal/reflectlite.directlyAssignable"
  "(*internal/reflectlite.rtype).AssignableTo" -> "internal/reflectlite.implements"
  "(*sync.entry).tryExpungeLocked" -> "sync/atomic.LoadPointer"
  "(*sync.entry).tryExpungeLocked" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync.entry).tryExpungeLocked" -> "sync/atomic.LoadPointer"
  "(*os.File).Sync" -> "(*os.File).checkValid"
  "(*os.File).Sync" -> "(*internal/poll.FD).Fsync"
  "(*os.File).Sync" -> "(*os.File).wrapErr"
  "(*context.valueCtx).Value" -> "context.value"
  "(*os.rawConn).Control" -> "(*os.File).checkValid"
  "(*internal/poll.FD).RawControl" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).RawControl" -> "(*internal/poll.FD).decref"
  "(*os.rawConn).Control" -> "(*internal/poll.FD).RawControl"
  "(*os.rawConn).Control" -> "runtime.KeepAlive"
  "(*flag.intValue).Set" -> "strconv.ParseInt"
  "(*flag.intValue).Set" -> "flag.numError"
  "(*log.Logger).SetPrefix" -> "(*sync.Mutex).Lock"
  "(*log.Logger).SetPrefix" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).LoadAndDelete" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Mutex).Lock"
  "(*sync.Map).LoadAndDelete" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Map).missLocked"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Mutex).Unlock"
  "(*sync.entry).delete" -> "sync/atomic.LoadPointer"
  "(*sync.entry).delete" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync.Map).LoadAndDelete" -> "(*sync.entry).delete"
  "(*sync.Map).Delete" -> "(*sync.Map).LoadAndDelete"
  "(*os.ProcessState).userTime" -> "(*syscall.Timeval).Nano"
  "(*os.ProcessState).UserTime" -> "(*os.ProcessState).userTime"
  "(*internal/poll.FD).SetsockoptInet4Addr" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptInet4Addr" -> "(*internal/poll.FD).decref"
  "syscall.SetsockoptInet4Addr" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptInet4Addr" -> "syscall.SetsockoptInet4Addr"
  "(internal/reflectlite.Value).Elem" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).Elem" -> "(*internal/reflectlite.rtype).NumMethod"
  "(internal/reflectlite.Value).Elem" -> "internal/reflectlite.unpackEface"
  "(internal/reflectlite.Value).Elem" -> "(internal/reflectlite.flag).ro"
  "(internal/reflectlite.Value).Elem" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).Elem" -> "(*internal/reflectlite.rtype).Kind"
  "sort.Search" -> "sort.SearchFloat64s$1"
  "sort.Search" -> "sort.SearchInts$1"
  "sort.Search" -> "sort.SearchStrings$1"
  "sort.SearchFloat64s" -> "sort.Search"
  "(*log.Logger).Printf" -> "sync/atomic.LoadInt32"
  "(*log.Logger).Printf" -> "fmt.Sprintf"
  "(*log.Logger).Printf" -> "(*log.Logger).Output"
  "(time.Time).UnixMilli" -> "(*time.Time).unixSec"
  "(time.Time).UnixMilli" -> "(*time.Time).nsec"
  "time.atoi" -> "time.leadingInt"
  "(syscall.WaitStatus).ExitStatus" -> "(syscall.WaitStatus).Exited"
  "(*os.ProcessState).success" -> "(syscall.WaitStatus).ExitStatus"
  "(*log.Logger).Print" -> "sync/atomic.LoadInt32"
  "fmt.Sprint" -> "fmt.newPrinter"
  "fmt.Sprint" -> "(*fmt.pp).doPrint"
  "fmt.Sprint" -> "(*fmt.pp).free"
  "(*log.Logger).Print" -> "fmt.Sprint"
  "(*log.Logger).Print" -> "(*log.Logger).Output"
  "runtime/pprof.printCountProfile$1" -> "(*bytes.Buffer).Reset"
  "runtime/pprof.printCountProfile$1" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile$1" -> "fmt.Fprintf"
  "(*bytes.Buffer).WriteString" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).WriteString" -> "(*bytes.Buffer).grow"
  "runtime/pprof.printCountProfile$1" -> "(*bytes.Buffer).WriteString"
  "(*runtime/pprof.labelMap).String" -> "fmt.Sprintf"
  "sort.Strings" -> "sort.Sort"
  "(*runtime/pprof.labelMap).String" -> "sort.Strings"
  "strings.Join" -> "(*strings.Builder).Grow"
  "strings.Join" -> "(*strings.Builder).WriteString"
  "strings.Join" -> "(*strings.Builder).WriteString"
  "strings.Join" -> "(*strings.Builder).WriteString"
  "strings.Join" -> "(*strings.Builder).String"
  "(*runtime/pprof.labelMap).String" -> "strings.Join"
  "runtime/pprof.printCountProfile$1" -> "(*runtime/pprof.labelMap).String"
  "runtime/pprof.printCountProfile$1" -> "(*bytes.Buffer).WriteString"
  "runtime/pprof.printCountProfile$1" -> "(*bytes.Buffer).String"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.huffmanBitWriter).flush"
  "(*compress/flate.Writer).Flush" -> "(*compress/flate.compressor).syncFlush"
  "(*io.onceError).Load" -> "(*sync.Mutex).Lock"
  "(*io.onceError).Load" -> "(*sync.Mutex).Unlock"
  "(*io.pipe).readCloseError" -> "(*io.onceError).Load"
  "(*io.pipe).readCloseError" -> "(*io.onceError).Load"
  "(*io.pipe).read" -> "(*io.pipe).readCloseError"
  "(*io.pipe).read" -> "(*io.pipe).readCloseError"
  "(*io.PipeReader).Read" -> "(*io.pipe).read"
  "(*context.cancelCtx).Value" -> "context.value"
  "runtime/pprof.writeHeapProto" -> "runtime/pprof.newProfileBuilder"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.writeHeapProto" -> "(*runtime.MemProfileRecord).Stack"
  "runtime/pprof.scaleHeapSample" -> "math.Exp"
  "runtime/pprof.writeHeapProto" -> "runtime/pprof.scaleHeapSample"
  "runtime/pprof.writeHeapProto" -> "(*runtime.MemProfileRecord).InUseObjects"
  "runtime/pprof.writeHeapProto" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapProto" -> "runtime/pprof.scaleHeapSample"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "runtime/pprof.writeHeapProto" -> "runtime.FuncForPC"
  "runtime/pprof.writeHeapProto" -> "(*runtime.Func).Name"
  "runtime/pprof.writeHeapProto" -> "strings.HasPrefix"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbSample"
  "syscall.munmap" -> "syscall.Syscall"
  "syscall.munmap" -> "syscall.errnoErr"
  "runtime/pprof.printCountProfile" -> "runtime/pprof.printCountProfile$1"
  "runtime/pprof.printCountProfile" -> "sort.Sort"
  "runtime/pprof.printCountProfile" -> "text/tabwriter.NewWriter"
  "runtime/pprof.printCountProfile" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile" -> "runtime/pprof.newProfileBuilder"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountProfile" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile" -> "runtime/pprof.printStackRecord"
  "runtime/pprof.printCountProfile" -> "(*text/tabwriter.Writer).Flush"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).pbSample"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Len"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Len"
  "(*runtime/pprof.runtimeProfile).Stack" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Label"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Label"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Len"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Len"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Label"
  "runtime/pprof.printCountProfile" -> "(runtime/pprof.stackProfile).Label"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.printCountProfile"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.runtime_goroutineProfileWithLabels"
  "runtime/pprof.writeThreadCreate$1" -> "runtime.ThreadCreateProfile"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.writeThreadCreate$1"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.runtime_goroutineProfileWithLabels"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.writeThreadCreate$1"
  "(*runtime/pprof.Profile).WriteTo" -> "(*sync.Mutex).Lock"
  "(*runtime/pprof.Profile).WriteTo" -> "(*sync.Mutex).Unlock"
  "(*runtime/pprof.Profile).WriteTo" -> "sort.Slice"
  "(*runtime/pprof.Profile).WriteTo" -> "runtime/pprof.printCountProfile"
  "(*sync/atomic.Uint64).Add" -> "sync/atomic.AddUint64"
  "internal/abi.init" -> "internal/goarch.init"
  "internal/abi.init" -> "unsafe.init"
  "(*os.Process).signal" -> "errors.New"
  "(*os.Process).signal" -> "errors.New"
  "(*os.Process).signal" -> "(*sync.RWMutex).RLock"
  "(*os.Process).signal" -> "(*sync.RWMutex).RUnlock"
  "(*os.Process).done" -> "sync/atomic.LoadUint32"
  "(*os.Process).signal" -> "(*os.Process).done"
  "(*os.Process).signal" -> "errors.New"
  "(*os.Process).signal" -> "syscall.Kill"
  "(*io.pipe).writeCloseError" -> "(*io.onceError).Load"
  "(*io.pipe).writeCloseError" -> "(*io.onceError).Load"
  "(*flag.FlagSet).StringVar" -> "flag.newStringValue"
  "(*flag.FlagSet).StringVar" -> "(*flag.FlagSet).Var"
  "(*flag.FlagSet).String" -> "(*flag.FlagSet).StringVar"
  "(*compress/flate.decompressor).Reset" -> "compress/flate.makeReader"
  "(*compress/flate.decompressor).Reset" -> "(*compress/flate.dictDecoder).init"
  "sort.SearchInts" -> "sort.Search"
  "internal/poll.fcntl" -> "syscall.Syscall"
  "internal/poll.DupCloseOnExec" -> "internal/poll.fcntl"
  "internal/poll.dupCloseOnExecOld" -> "(*sync.RWMutex).RLock"
  "internal/poll.dupCloseOnExecOld" -> "(*sync.RWMutex).RUnlock"
  "syscall.Dup" -> "syscall.Syscall"
  "syscall.Dup" -> "syscall.errnoErr"
  "internal/poll.dupCloseOnExecOld" -> "syscall.Dup"
  "internal/poll.dupCloseOnExecOld" -> "syscall.CloseOnExec"
  "internal/poll.DupCloseOnExec" -> "internal/poll.dupCloseOnExecOld"
  "internal/poll.DupCloseOnExec" -> "sync/atomic.LoadInt32"
  "internal/poll.DupCloseOnExec" -> "sync/atomic.StoreInt32"
  "time.parseSignedOffset" -> "time.leadingInt"
  "(*sync/atomic.Int32).Load" -> "sync/atomic.LoadInt32"
  "(*sync.Map).dirtyLocked" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).dirtyLocked" -> "(*sync.entry).tryExpungeLocked"
  "(*bufio.Reader).ReadSlice" -> "bytes.IndexByte"
  "(*bufio.Reader).ReadSlice" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).ReadSlice" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).ReadSlice" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).collectFragments" -> "(*bufio.Reader).ReadSlice"
  "(*bufio.Reader).ReadBytes" -> "(*bufio.Reader).collectFragments"
  "(syscall.WaitStatus).StopSignal" -> "(syscall.WaitStatus).Stopped"
  "(*os.ProcessState).SysUsage" -> "(*os.ProcessState).sysUsage"
  "(*runtime/internal/atomic.Uintptr).StoreRelease" -> "runtime/internal/atomic.StoreReluintptr"
  "(*bytes.Reader).ReadAt" -> "errors.New"
  "math/rand.init" -> "math.init"
  "math/rand.init" -> "sync.init"
  "math/rand.NewSource" -> "(*math/rand.rngSource).Seed"
  "math/rand.init" -> "math/rand.NewSource"
  "math/rand.init" -> "math/rand.New"
  "(time.Time).Truncate" -> "(*time.Time).stripMono"
  "(time.Time).Truncate" -> "time.div"
  "(time.Time).Truncate" -> "(time.Time).Add"
  "(*runtime/internal/atomic.Uint32).Load" -> "runtime/internal/atomic.Load"
  "(time.Time).IsDST" -> "(time.Time).Unix"
  "(time.Time).IsDST" -> "(*time.Location).lookup"
  "(*runtime/internal/atomic.Int64).Load" -> "runtime/internal/atomic.Loadint64"
  "(time.Time).Month" -> "(time.Time).date"
  "(*runtime/internal/atomic.Int64).CompareAndSwap" -> "runtime/internal/atomic.Casint64"
  "(*io/fs.statDirEntry).Type" -> "(io/fs.FileMode).Type"
  "(*os.ProcessState).systemTime" -> "(*syscall.Timeval).Nano"
  "(unicode.SpecialCase).ToLower" -> "unicode.to"
  "unicode.To" -> "unicode.to"
  "unicode.ToLower" -> "unicode.To"
  "(unicode.SpecialCase).ToLower" -> "unicode.ToLower"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).setLoc"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).unixSec"
  "(*time.Time).UnmarshalBinary" -> "(*time.Location).lookup"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).setLoc"
  "(*time.Time).UnmarshalBinary" -> "time.FixedZone"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).setLoc"
  "(*time.Time).GobDecode" -> "(*time.Time).UnmarshalBinary"
  "(*compress/gzip.Reader).Read" -> "hash/crc32.Update"
  "(*compress/gzip.Reader).Read" -> "io.ReadFull"
  "(*compress/gzip.Reader).Read" -> "compress/gzip.noEOF"
  "(*compress/gzip.Reader).Read" -> "(encoding/binary.littleEndian).Uint32"
  "(*compress/gzip.Reader).Read" -> "(encoding/binary.littleEndian).Uint32"
  "(*compress/gzip.Reader).Read" -> "(*compress/gzip.Reader).readHeader"
  "(*time.Location).String" -> "(*time.Location).get"
  "(*runtime/internal/atomic.Int32).Store" -> "runtime/internal/atomic.Storeint32"
  "(*flag.FlagSet).defaultUsage" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).defaultUsage" -> "fmt.Fprintf"
  "(*flag.FlagSet).defaultUsage" -> "(*flag.FlagSet).PrintDefaults"
  "(*flag.FlagSet).defaultUsage" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).defaultUsage" -> "fmt.Fprintf"
  "(*flag.FlagSet).usage" -> "(*flag.FlagSet).defaultUsage"
  "(*flag.FlagSet).usage" -> "(*flag.FlagSet).defaultUsage"
  "flag.commandLineUsage" -> "flag.init$1"
  "(*flag.FlagSet).usage" -> "flag.commandLineUsage"
  "(*log.Logger).Fatalln" -> "fmt.Sprintln"
  "(*log.Logger).Fatalln" -> "(*log.Logger).Output"
  "internal/testlog.PanicOnExit0" -> "(*sync.Mutex).Lock"
  "internal/testlog.PanicOnExit0" -> "(*sync.Mutex).Unlock"
  "os.Exit" -> "internal/testlog.PanicOnExit0"
  "os.Exit" -> "syscall.Exit"
  "os.Exit" -> "os.runtime_beforeExit"
  "(*log.Logger).Fatalln" -> "os.Exit"
  "(time.Time).ZoneBounds" -> "(*time.Time).unixSec"
  "(time.Time).ZoneBounds" -> "(*time.Location).lookup"
  "(time.Time).ZoneBounds" -> "time.unixTime"
  "(time.Time).ZoneBounds" -> "(*time.Time).setLoc"
  "(time.Time).ZoneBounds" -> "time.unixTime"
  "(time.Time).ZoneBounds" -> "(*time.Time).setLoc"
  "(*os.ProcessState).SystemTime" -> "(*os.ProcessState).systemTime"
  "(*sync/atomic.Bool).CompareAndSwap" -> "sync/atomic.b32"
  "(*sync/atomic.Bool).CompareAndSwap" -> "sync/atomic.b32"
  "(*sync/atomic.Bool).CompareAndSwap" -> "sync/atomic.CompareAndSwapUint32"
  "(*flag.float64Value).Set" -> "strconv.ParseFloat"
  "(*flag.float64Value).Set" -> "flag.numError"
  "(*math/rand.Rand).Uint64" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).Uint64" -> "(*math/rand.Rand).Int63"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.runtime_procPin"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).Swap" -> "sync/atomic.SwapPointer"
  "(*bufio.Scanner).advance" -> "(*bufio.Scanner).setErr"
  "(*bufio.Scanner).advance" -> "(*bufio.Scanner).setErr"
  "(*bufio.Scanner).Scan" -> "(*bufio.Scanner).advance"
  "(*bufio.Scanner).Scan" -> "(*bufio.Scanner).setErr"
  "(*bufio.Scanner).Scan" -> "(*bufio.Scanner).setErr"
  "(*bufio.Scanner).Scan" -> "(*bufio.Scanner).setErr"
  "(*bufio.Scanner).Scan" -> "(*bufio.Scanner).setErr"
  "(*bufio.Scanner).Scan" -> "(*bufio.Scanner).setErr"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadFromInet4" -> "internal/syscall/unix.RecvfromInet4"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.pollDesc).pollable"
  "time.parse" -> "time.nextStdChunk"
  "time.skip" -> "time.cutspace"
  "time.skip" -> "time.cutspace"
  "time.parse" -> "time.skip"
  "time.parse" -> "time.quote"
  "time.parse" -> "time.atoi"
  "time.lookup" -> "time.match"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.isDigit"
  "time.parse" -> "time.lookup"
  "time.getnum" -> "time.isDigit"
  "time.getnum" -> "time.isDigit"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum3"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.nextStdChunk"
  "time.parse" -> "time.isDigit"
  "time.parse" -> "time.commaOrPeriod"
  "time.parseNanoseconds" -> "time.commaOrPeriod"
  "time.parseNanoseconds" -> "time.atoi"
  "time.parse" -> "time.parseNanoseconds"
  "time.parse" -> "time.isDigit"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.digitsLen"
  "time.parseGMT" -> "time.parseSignedOffset"
  "time.parseTimeZone" -> "time.parseGMT"
  "time.parseTimeZone" -> "time.parseSignedOffset"
  "time.parse" -> "time.parseTimeZone"
  "time.parse" -> "time.parseNanoseconds"
  "time.parse" -> "time.commaOrPeriod"
  "time.parse" -> "time.parseNanoseconds"
  "time.parse" -> "time.isLeap"
  "time.parse" -> "time.daysIn"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.daysSinceEpoch"
  "time.Date" -> "time.isLeap"
  "time.Date" -> "(*time.Location).lookup"
  "time.Date" -> "time.unixTime"
  "time.Date" -> "(*time.Time).setLoc"
  "time.Date" -> "(*time.Location).lookup"
  "time.parse" -> "time.Date"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Time).addSec"
  "time.parse" -> "(*time.Time).unixSec"
  "time.parse" -> "(*time.Location).lookup"
  "time.parse" -> "(*time.Time).setLoc"
  "time.parse" -> "time.FixedZone"
  "time.parse" -> "(*time.Time).setLoc"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Time).unixSec"
  "(*time.Location).lookupName" -> "(*time.Location).get"
  "(*time.Location).lookupName" -> "(*time.Location).lookup"
  "time.parse" -> "(*time.Location).lookupName"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Time).addSec"
  "time.parse" -> "(*time.Time).setLoc"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.FixedZone"
  "time.parse" -> "(*time.Time).setLoc"
  "time.Parse" -> "time.parse"
  "(*os.File).Chdir" -> "(*os.File).checkValid"
  "(*internal/poll.FD).Fchdir" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fchdir" -> "(*internal/poll.FD).decref"
  "syscall.Fchdir" -> "syscall.Syscall"
  "syscall.Fchdir" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fchdir" -> "syscall.Fchdir"
  "(*os.File).Chdir" -> "(*internal/poll.FD).Fchdir"
  "(*os.File).Chdir" -> "(*os.File).wrapErr"
  "syscall.SetsockoptIPMreq" -> "syscall.setsockopt"
  "(*hash/crc32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/crc32.digest).UnmarshalBinary" -> "errors.New"
  "hash/crc32.tableSum" -> "hash/crc32.ChecksumIEEE"
  "hash/crc32.tableSum" -> "hash/crc32.appendUint32"
  "(*hash/crc32.digest).UnmarshalBinary" -> "hash/crc32.tableSum"
  "(*hash/crc32.digest).UnmarshalBinary" -> "hash/crc32.readUint32"
  "(*hash/crc32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/crc32.digest).UnmarshalBinary" -> "hash/crc32.readUint32"
  "(*sync.WaitGroup).Add" -> "(*sync.WaitGroup).state"
  "(*sync.WaitGroup).Add" -> "sync/atomic.AddUint64"
  "(*sync.WaitGroup).Add" -> "internal/race.ReleaseMerge"
  "(*sync.WaitGroup).Add" -> "internal/race.Disable"
  "(*sync.WaitGroup).Add" -> "internal/race.Enable"
  "(*sync.WaitGroup).Add" -> "internal/race.Read"
  "(*sync.WaitGroup).Add" -> "sync.runtime_Semrelease"
  "(*sync.WaitGroup).Done" -> "(*sync.WaitGroup).Add"
  "(*runtime/internal/atomic.Uint8).Or" -> "runtime/internal/atomic.Or8"
  "(*sync/atomic.Uint64).Swap" -> "sync/atomic.SwapUint64"
  "(time.Time).GobEncode" -> "(time.Time).MarshalBinary"
  "(*strings.Reader).Seek" -> "errors.New"
  "(*strings.Reader).Seek" -> "errors.New"
  "internal/poll.CopyFileRange" -> "sync/atomic.LoadInt32"
  "internal/poll.kernelVersion" -> "syscall.Uname"
  "internal/poll.CopyFileRange" -> "internal/poll.kernelVersion"
  "internal/poll.CopyFileRange" -> "sync/atomic.StoreInt32"
  "internal/poll.CopyFileRange" -> "sync/atomic.StoreInt32"
  "internal/poll.CopyFileRange" -> "internal/poll.copyFileRange"
  "internal/poll.CopyFileRange" -> "sync/atomic.StoreInt32"
  "runtime/pprof.StopCPUProfile" -> "(*sync.Mutex).Lock"
  "runtime/pprof.StopCPUProfile" -> "(*sync.Mutex).Unlock"
  "runtime/pprof.StopCPUProfile" -> "runtime.SetCPUProfileRate"
  "(*runtime/internal/atomic.Int32).Add" -> "runtime/internal/atomic.Xaddint32"
  "(*runtime/internal/atomic.Uint64).Load" -> "runtime/internal/atomic.Load64"
  "(*runtime/internal/atomic.Float64).Load" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*hash/crc32.digest).Sum" -> "(*hash/crc32.digest).Sum32"
  "(*internal/poll.FD).Pwrite" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Pwrite" -> "(*internal/poll.FD).decref"
  "syscall.Pwrite" -> "internal/race.ReleaseMerge"
  "syscall.pwrite" -> "syscall.Syscall6"
  "syscall.pwrite" -> "syscall.errnoErr"
  "syscall.Pwrite" -> "syscall.pwrite"
  "syscall.Pwrite" -> "internal/race.ReadRange"
  "syscall.Pwrite" -> "syscall.msanRead"
  "syscall.Pwrite" -> "syscall.asanRead"
  "(*internal/poll.FD).Pwrite" -> "syscall.Pwrite"
  "(*flag.FlagSet).IntVar" -> "flag.newIntValue"
  "(*flag.FlagSet).IntVar" -> "(*flag.FlagSet).Var"
  "(*flag.FlagSet).Int" -> "(*flag.FlagSet).IntVar"
  "(*fmt.readRune).ReadRune" -> "unicode/utf8.RuneLen"
  "(*fmt.readRune).readByte" -> "io.ReadFull"
  "(*fmt.readRune).ReadRune" -> "(*fmt.readRune).readByte"
  "(*fmt.readRune).ReadRune" -> "(*fmt.readRune).readByte"
  "(*fmt.readRune).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*fmt.readRune).ReadRune" -> "unicode/utf8.FullRune"
  "(*flag.FlagSet).failf" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).failf" -> "(*flag.FlagSet).usage"
  "(*flag.FlagSet).failf" -> "errors.New"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).usage"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).IsBoolFlag"
  "strconv.ParseBool" -> "strconv.syntaxError"
  "(*flag.boolValue).Set" -> "strconv.ParseBool"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).Set"
  "(*flag.uintValue).Set" -> "strconv.ParseUint"
  "(*flag.uintValue).Set" -> "flag.numError"
  "(*flag.FlagSet).parseOne" -> "(*flag.uintValue).Set"
  "(*flag.FlagSet).parseOne" -> "(flag.funcValue).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.float64Value).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.int64Value).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.stringValue).Set"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.leadingInt"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.leadingFraction"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "time.ParseDuration" -> "time.quote"
  "time.ParseDuration" -> "errors.New"
  "(*flag.durationValue).Set" -> "time.ParseDuration"
  "(*flag.FlagSet).parseOne" -> "(*flag.durationValue).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).Set"
  "(*flag.FlagSet).parseOne" -> "(flag.textValue).Set"
  "(*flag.uint64Value).Set" -> "strconv.ParseUint"
  "(*flag.uint64Value).Set" -> "flag.numError"
  "(*flag.FlagSet).parseOne" -> "(*flag.uint64Value).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.intValue).Set"
  "(*log.Logger).Prefix" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Prefix" -> "(*sync.Mutex).Unlock"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteMsgInet6" -> "internal/syscall/unix.SendmsgNInet6"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*runtime/internal/atomic.Uint8).Store" -> "runtime/internal/atomic.Store8"
  "(*flag.FlagSet).Parse" -> "(*flag.FlagSet).parseOne"
  "(*flag.FlagSet).Parse" -> "os.Exit"
  "(*flag.FlagSet).Parse" -> "os.Exit"
  "runtime/pprof.lostProfileEvent" -> "runtime/pprof.lostProfileEvent"
  "(internal/reflectlite.flag).mustBeAssignable" -> "internal/reflectlite.methodName"
  "(internal/reflectlite.flag).mustBeAssignable" -> "internal/reflectlite.methodName"
  "(internal/reflectlite.flag).mustBeAssignable" -> "internal/reflectlite.methodName"
  "(*strings.Reader).ReadRune" -> "unicode/utf8.DecodeRuneInString"
  "flag.init" -> "encoding.init"
  "flag.init" -> "errors.init"
  "flag.init" -> "fmt.init"
  "flag.init" -> "io.init"
  "flag.init" -> "os.init"
  "flag.init" -> "reflect.init"
  "flag.init" -> "sort.init"
  "flag.init" -> "strconv.init"
  "flag.init" -> "strings.init"
  "flag.init" -> "time.init"
  "flag.init" -> "errors.New"
  "flag.init" -> "errors.New"
  "flag.init" -> "errors.New"
  "flag.init" -> "flag.NewFlagSet"
  "flag.init" -> "flag.init#1"
  "command-line-arguments.init" -> "flag.init"
  "log.init" -> "fmt.init"
  "log.init" -> "io.init"
  "log.init" -> "os.init"
  "log.init" -> "runtime.init"
  "log.init" -> "sync.init"
  "log.init" -> "sync/atomic.init"
  "log.init" -> "time.init"
  "log.init" -> "log.New"
  "command-line-arguments.init" -> "log.init"
  "command-line-arguments.init" -> "math/rand.init"
  "command-line-arguments.init" -> "os.init"
  "encoding/binary.init" -> "errors.init"
  "encoding/binary.init" -> "io.init"
  "encoding/binary.init" -> "math.init"
  "encoding/binary.init" -> "reflect.init"
  "encoding/binary.init" -> "sync.init"
  "encoding/binary.init" -> "errors.New"
  "runtime/pprof.init" -> "encoding/binary.init"
  "runtime/pprof.init" -> "errors.init"
  "runtime/pprof.init" -> "fmt.init"
  "runtime/pprof.init" -> "os.init"
  "runtime/pprof.init" -> "context.init"
  "runtime/pprof.init" -> "sort.init"
  "runtime/pprof.init" -> "strings.init"
  "runtime/pprof.init" -> "unsafe.init"
  "runtime/pprof.init" -> "bufio.init"
  "runtime/pprof.init" -> "bytes.init"
  "runtime/pprof.init" -> "internal/abi.init"
  "runtime/pprof.init" -> "io.init"
  "runtime/pprof.init" -> "runtime.init"
  "runtime/pprof.init" -> "sync.init"
  "text/tabwriter.init" -> "io.init"
  "text/tabwriter.init" -> "unicode/utf8.init"
  "runtime/pprof.init" -> "text/tabwriter.init"
  "runtime/pprof.init" -> "time.init"
  "runtime/pprof.init" -> "syscall.init"
  "compress/gzip.init" -> "bufio.init"
  "compress/gzip.init" -> "compress/flate.init"
  "compress/gzip.init" -> "encoding/binary.init"
  "compress/gzip.init" -> "errors.init"
  "hash/crc32.init" -> "errors.init"
  "hash/crc32.init" -> "hash.init"
  "hash/crc32.init" -> "sync.init"
  "hash/crc32.init" -> "sync/atomic.init"
  "hash/crc32.init" -> "internal/cpu.init"
  "hash/crc32.init" -> "unsafe.init"
  "hash/crc32.simpleMakeTable" -> "hash/crc32.simplePopulateTable"
  "hash/crc32.init" -> "hash/crc32.simpleMakeTable"
  "compress/gzip.init" -> "hash/crc32.init"
  "compress/gzip.init" -> "io.init"
  "compress/gzip.init" -> "time.init"
  "compress/gzip.init" -> "fmt.init"
  "compress/gzip.init" -> "errors.New"
  "compress/gzip.init" -> "errors.New"
  "runtime/pprof.init" -> "compress/gzip.init"
  "runtime/pprof.init" -> "strconv.init"
  "runtime/pprof.init" -> "math.init"
  "runtime/pprof.init" -> "errors.New"
  "runtime/pprof.init" -> "errors.New"
  "command-line-arguments.init" -> "runtime/pprof.init"
  "flag.Bool" -> "(*flag.FlagSet).Bool"
  "command-line-arguments.init" -> "flag.Bool"
  "command-line-arguments.init" -> "flag.Bool"
  "<root>" -> "command-line-arguments.init"
  "flag.Parse" -> "(*flag.FlagSet).Parse"
  "command-line-arguments.main" -> "flag.Parse"
  "os.Create" -> "os.OpenFile"
  "command-line-arguments.main" -> "os.Create"
  "command-line-arguments.main" -> "command-line-arguments.SimulationAlloc"
  "log.Fatal" -> "fmt.Sprint"
  "log.Fatal" -> "(*log.Logger).Output"
  "log.Fatal" -> "os.Exit"
  "command-line-arguments.main" -> "log.Fatal"
  "command-line-arguments.main" -> "runtime/pprof.StartCPUProfile"
  "command-line-arguments.main" -> "runtime/pprof.StopCPUProfile"
  "command-line-arguments.main" -> "os.Create"
  "command-line-arguments.main" -> "log.Fatal"
  "runtime/pprof.writeHeapInternal" -> "runtime.ReadMemStats"
  "runtime/pprof.writeHeapInternal" -> "runtime.MemProfile"
  "runtime/pprof.writeHeapInternal" -> "runtime.MemProfile"
  "runtime/pprof.writeHeapInternal" -> "runtime/pprof.writeHeapProto"
  "runtime/pprof.writeHeapInternal" -> "sort.Slice"
  "runtime/pprof.writeHeapInternal" -> "bufio.NewWriter"
  "runtime/pprof.writeHeapInternal" -> "text/tabwriter.NewWriter"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseObjects"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseObjects"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).Stack"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "syscall.Getrusage" -> "syscall.RawSyscall"
  "syscall.Getrusage" -> "syscall.errnoErr"
  "runtime/pprof.addMaxRSS" -> "syscall.Getrusage"
  "runtime/pprof.addMaxRSS" -> "fmt.Fprintf"
  "runtime/pprof.addMaxRSS" -> "syscall.Getpagesize"
  "runtime/pprof.writeHeapInternal" -> "runtime/pprof.addMaxRSS"
  "runtime/pprof.writeHeapInternal" -> "(*text/tabwriter.Writer).Flush"
  "runtime/pprof.writeHeapInternal" -> "(*bufio.Writer).Flush"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).Stack"
  "runtime/pprof.writeHeapInternal" -> "runtime/pprof.printStackRecord"
  "runtime/pprof.writeHeap" -> "runtime/pprof.writeHeapInternal"
  "runtime/pprof.WriteHeapProfile" -> "runtime/pprof.writeHeap"
  "command-line-arguments.main" -> "runtime/pprof.WriteHeapProfile"
  "command-line-arguments.main" -> "(*os.File).Close"
  "<root>" -> "command-line-arguments.main"
  "internal/poll.accept" -> "syscall.CloseOnExec"
  "internal/poll.accept" -> "syscall.SetNonblock"
  "syscall.accept4" -> "syscall.Syscall6"
  "syscall.accept4" -> "syscall.errnoErr"
  "syscall.Accept4" -> "syscall.accept4"
  "syscall.Accept4" -> "syscall.anyToSockaddr"
  "syscall.Accept4" -> "syscall.Close"
  "internal/poll.accept" -> "syscall.Accept4"
  "syscall.Accept" -> "syscall.accept4"
  "syscall.Accept" -> "syscall.anyToSockaddr"
  "syscall.Accept" -> "syscall.Close"
  "internal/poll.accept" -> "syscall.Accept"
  "internal/poll.accept" -> "syscall.Close"
  "(*internal/poll.FD).Fchown" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fchown" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fchown" -> "internal/poll.ignoringEINTR"
  "(time.Time).ISOWeek" -> "(time.Time).abs"
  "(time.Time).ISOWeek" -> "time.absWeekday"
  "(time.Time).ISOWeek" -> "time.absDate"
  "(*runtime/pprof.Profile).Add" -> "runtime.Callers"
  "(*runtime/pprof.Profile).Add" -> "internal/abi.FuncPCABIInternal"
  "(*runtime/pprof.Profile).Add" -> "(*sync.Mutex).Lock"
  "(*runtime/pprof.Profile).Add" -> "(*sync.Mutex).Unlock"
  "(*math/rand.Zipf).hinv" -> "math.Log"
  "(*math/rand.Zipf).hinv" -> "math.Exp"
  "(*sync/atomic.Int32).CompareAndSwap" -> "sync/atomic.CompareAndSwapInt32"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteToInet6" -> "internal/syscall/unix.SendtoInet6"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).WriteAt" -> "(*os.File).checkValid"
  "(*os.File).WriteAt" -> "errors.New"
  "(*os.File).pwrite" -> "(*internal/poll.FD).Pwrite"
  "(*os.File).pwrite" -> "runtime.KeepAlive"
  "(*os.File).WriteAt" -> "(*os.File).pwrite"
  "(*os.File).WriteAt" -> "(*os.File).wrapErr"
  "runtime/pprof.countMutex" -> "runtime.MutexProfile"
  "sort.SearchStrings" -> "sort.Search"
  "(*sync/atomic.Uint64).CompareAndSwap" -> "sync/atomic.CompareAndSwapUint64"
  "(*runtime/internal/atomic.Uint32).CompareAndSwapRelease" -> "runtime/internal/atomic.CasRel"
  "(*context.cancelCtx).Err" -> "(*sync.Mutex).Lock"
  "(*context.cancelCtx).Err" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).Fatal" -> "fmt.Sprint"
  "(*log.Logger).Fatal" -> "(*log.Logger).Output"
  "(*log.Logger).Fatal" -> "os.Exit"
  "(*sync/atomic.Uintptr).Swap" -> "sync/atomic.SwapUintptr"
  "(*flag.FlagSet).DurationVar" -> "flag.newDurationValue"
  "(*flag.FlagSet).DurationVar" -> "(*flag.FlagSet).Var"
  "(*flag.FlagSet).Duration" -> "(*flag.FlagSet).DurationVar"
  "syscall.sendmsgN" -> "(*syscall.Iovec).SetLen"
  "syscall.sendmsg" -> "syscall.Syscall"
  "syscall.sendmsg" -> "syscall.errnoErr"
  "syscall.sendmsgN" -> "syscall.sendmsg"
  "syscall.sendmsgN" -> "syscall.GetsockoptInt"
  "syscall.sendmsgN" -> "(*syscall.Msghdr).SetControllen"
  "syscall.sendmsgN" -> "(*syscall.Iovec).SetLen"
  "(*internal/poll.FD).SetReadDeadline" -> "internal/poll.setDeadlineImpl"
  "(*log.Logger).Fatalf" -> "fmt.Sprintf"
  "(*log.Logger).Fatalf" -> "(*log.Logger).Output"
  "(*log.Logger).Fatalf" -> "os.Exit"
  "(*os.File).ReadFrom" -> "(*os.File).checkValid"
  "(*os.File).readFrom" -> "(*os.File).checkValid"
  "(*os.File).readFrom" -> "os.NewSyscallError"
  "(*os.File).readFrom" -> "internal/poll.CopyFileRange"
  "(*os.File).ReadFrom" -> "(*os.File).readFrom"
  "os.genericReadFrom" -> "io.Copy"
  "(*os.File).ReadFrom" -> "os.genericReadFrom"
  "(*os.File).ReadFrom" -> "(*os.File).wrapErr"
  "(*strings.Reader).ReadAt" -> "errors.New"
  "(time.Time).Local" -> "(*time.Time).setLoc"
  "(*sync/atomic.Uintptr).Load" -> "sync/atomic.LoadUintptr"
  "(*os.File).setReadDeadline" -> "(*os.File).checkValid"
  "(*os.File).setReadDeadline" -> "(*internal/poll.FD).SetReadDeadline"
  "(*compress/flate.decompressor).moreBits" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).dataBlock" -> "io.ReadFull"
  "(*compress/flate.decompressor).dataBlock" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).dataBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).dataBlock" -> "(*compress/flate.decompressor).finishBlock"
  "(*compress/flate.decompressor).dataBlock" -> "(*compress/flate.decompressor).copyData"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).dataBlock"
  "(*compress/flate.decompressor).huffSym" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).huffSym"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).tryWriteCopy"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).writeByte"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).availWrite"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).finishBlock"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).huffSym"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).huffmanBlock" -> "math/bits.Reverse8"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).histSize"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).writeCopy"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).availWrite"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).huffmanBlock"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.huffmanDecoder).init"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).huffSym"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.huffmanDecoder).init"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.huffmanDecoder).init"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).readHuffman"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).huffmanBlock"
  "(*compress/flate.WriteError).Error" -> "strconv.FormatInt"
  "(*sync/atomic.Int64).Add" -> "sync/atomic.AddInt64"
  "(*internal/poll.FD).SetsockoptIPMreqn" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptIPMreqn" -> "(*internal/poll.FD).decref"
  "syscall.SetsockoptIPMreqn" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptIPMreqn" -> "syscall.SetsockoptIPMreqn"
  "(*flag.FlagSet).Visit" -> "flag.sortFlags"
  "(*os.unixDirent).IsDir" -> "(io/fs.FileMode).IsDir"
  "(*math/rand.Rand).Perm" -> "(*math/rand.Rand).Intn"
  "(*sync/atomic.Int64).Store" -> "sync/atomic.StoreInt64"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadFromInet6" -> "internal/syscall/unix.RecvfromInet6"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*runtime/internal/atomic.Uintptr).Add" -> "runtime/internal/atomic.Xadduintptr"
  "(*sync/atomic.Uintptr).Add" -> "sync/atomic.AddUintptr"
  "(*fmt.ss).Read" -> "errors.New"
  "(*sync.RWMutex).Lock" -> "internal/race.Disable"
  "(*sync.RWMutex).Lock" -> "(*sync.Mutex).Lock"
  "(*sync.RWMutex).Lock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).Lock" -> "sync.runtime_SemacquireMutex"
  "(*sync.RWMutex).Lock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).Lock" -> "internal/race.Enable"
  "(*sync.RWMutex).Lock" -> "internal/race.Acquire"
  "(*sync.RWMutex).Lock" -> "internal/race.Acquire"
  "(*flag.FlagSet).Uint64Var" -> "flag.newUint64Value"
  "(*flag.FlagSet).Uint64Var" -> "(*flag.FlagSet).Var"
  "(*sync.Map).Store" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).Store" -> "(*sync.Mutex).Lock"
  "(*sync.Map).Store" -> "(*sync/atomic.Value).Load"
  "(*sync.entry).tryStore" -> "sync/atomic.LoadPointer"
  "(*sync.entry).tryStore" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync.Map).Store" -> "(*sync.entry).tryStore"
  "(*sync.entry).unexpungeLocked" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync.Map).Store" -> "(*sync.entry).unexpungeLocked"
  "(*sync.Map).Store" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).Store" -> "(*sync.entry).storeLocked"
  "(*sync.Map).Store" -> "(*sync.entry).storeLocked"
  "(*sync.Map).Store" -> "(*sync.Map).dirtyLocked"
  "(*sync.Map).Store" -> "(*sync/atomic.Value).Store"
  "(*sync.Map).Store" -> "sync.newEntry"
  "syscall.Wait4" -> "syscall.wait4"
  "(*sync/atomic.Int64).Load" -> "sync/atomic.LoadInt64"
  "(*time.Time).UnmarshalText" -> "time.Parse"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.pollDesc).prepareWrite"
  "syscall.SendmsgN" -> "syscall.sendmsgN"
  "(*internal/poll.FD).WriteMsg" -> "syscall.SendmsgN"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).chmod" -> "(*os.File).checkValid"
  "(*os.File).chmod" -> "os.syscallMode"
  "(*internal/poll.FD).Fchmod" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fchmod" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fchmod" -> "internal/poll.ignoringEINTR"
  "(*os.File).chmod" -> "(*internal/poll.FD).Fchmod"
  "(*os.File).chmod" -> "(*os.File).wrapErr"
  "runtime/pprof.countBlock" -> "runtime.BlockProfile"
  "(*strings.Reader).WriteTo" -> "io.WriteString"
  "(*time.Timer).Reset" -> "time.when"
  "(*time.Timer).Reset" -> "time.resetTimer"
  "(*hash/crc32.digest).Write" -> "sync/atomic.LoadUint32"
  "(*hash/crc32.digest).Write" -> "hash/crc32.simpleUpdate"
  "(*hash/crc32.digest).Write" -> "hash/crc32.archUpdateIEEE"
  "(*hash/crc32.digest).Write" -> "hash/crc32.ieeeInit$1"
  "(*math/rand.lockedSource).read" -> "(*sync.Mutex).Lock"
  "math/rand.read" -> "(*math/rand.rngSource).Int63"
  "math/rand.read" -> "(*math/rand.rngSource).Int63"
  "(*math/rand.lockedSource).read" -> "math/rand.read"
  "(*math/rand.lockedSource).read" -> "(*sync.Mutex).Unlock"
  "internal/poll.newPipe" -> "sync/atomic.LoadPointer"
  "syscall.pipe2" -> "syscall.RawSyscall"
  "syscall.pipe2" -> "syscall.errnoErr"
  "syscall.Pipe2" -> "syscall.pipe2"
  "internal/poll.newPipe" -> "syscall.Pipe2"
  "internal/poll.newPipe" -> "sync/atomic.StorePointer"
  "internal/poll.newPipe" -> "syscall.Syscall"
  "internal/poll.destroyPipe" -> "syscall.Close"
  "internal/poll.destroyPipe" -> "syscall.Close"
  "internal/poll.newPipe" -> "internal/poll.destroyPipe"
  "internal/poll.newPoolPipe" -> "internal/poll.newPipe"
  "internal/poll.newPoolPipe" -> "internal/poll.destroyPipe"
  "(*runtime/internal/atomic.Int64).Store" -> "runtime/internal/atomic.Storeint64"
  "(*log.Logger).Panicln" -> "fmt.Sprintln"
  "(*log.Logger).Panicln" -> "(*log.Logger).Output"
  "(*strings.Replacer).Replace" -> "(*sync.Once).Do"
  "flag.newTextValue" -> "reflect.ValueOf"
  "flag.newTextValue" -> "(reflect.Value).Kind"
  "flag.newTextValue" -> "reflect.ValueOf"
  "flag.newTextValue" -> "(reflect.Value).Kind"
  "flag.newTextValue" -> "(reflect.Value).Elem"
  "flag.newTextValue" -> "(reflect.Value).Type"
  "flag.newTextValue" -> "(reflect.Value).Type"
  "flag.newTextValue" -> "(*reflect.rtype).Elem"
  "flag.newTextValue" -> "(reflect.Value).Type"
  "flag.newTextValue" -> "(reflect.Value).Type"
  "flag.newTextValue" -> "(*reflect.rtype).Elem"
  "flag.newTextValue" -> "fmt.Sprintf"
  "flag.newTextValue" -> "(reflect.Value).Elem"
  "flag.newTextValue" -> "(reflect.Value).Set"
  "(syscall.WaitStatus).TrapCause" -> "(syscall.WaitStatus).StopSignal"
  "(*time.Ticker).Stop" -> "time.stopTimer"
  "(*os.Process).Signal" -> "(*os.Process).signal"
  "(*os.Process).kill" -> "(*os.Process).Signal"
  "(*strings.genericReplacer).lookup" -> "strings.HasPrefix"
  "(*flag.FlagSet).Uint64" -> "(*flag.FlagSet).Uint64Var"
  "(*math/rand.Rand).NormFloat64" -> "(*math/rand.Rand).Uint32"
  "(*math/rand.Rand).NormFloat64" -> "math/rand.absInt32"
  "(*math/rand.Rand).Float64" -> "(*math/rand.Rand).Int63"
  "(*math/rand.Rand).NormFloat64" -> "(*math/rand.Rand).Float64"
  "(*math/rand.Rand).NormFloat64" -> "math.Exp"
  "(*math/rand.Rand).NormFloat64" -> "(*math/rand.Rand).Float64"
  "(*math/rand.Rand).NormFloat64" -> "math.Log"
  "(*math/rand.Rand).NormFloat64" -> "(*math/rand.Rand).Float64"
  "(*math/rand.Rand).NormFloat64" -> "math.Log"
  "(*sync/atomic.Int64).CompareAndSwap" -> "sync/atomic.CompareAndSwapInt64"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteMsgInet4" -> "internal/syscall/unix.SendmsgNInet4"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.pollDesc).pollable"
  "runtime/pprof.countHeap" -> "runtime.MemProfile"
  "(*runtime/pprof.Profile).Count" -> "(*sync.Mutex).Lock"
  "(*runtime/pprof.Profile).Count" -> "(*sync.Mutex).Unlock"
  "(time.Time).YearDay" -> "(time.Time).date"
  "(*runtime/internal/atomic.Uint32).Swap" -> "runtime/internal/atomic.Xchg"
  "(*sync/atomic.Int64).Swap" -> "sync/atomic.SwapInt64"
  "(*fmt.readRune).UnreadRune" -> "errors.New"
  "(sort.IntSlice).Search" -> "sort.SearchInts"
  "(*bytes.Buffer).Read" -> "(*bytes.Buffer).empty"
  "(*bytes.Buffer).Read" -> "(*bytes.Buffer).Reset"
  "(*math/rand.lockedSource).Uint64" -> "(*sync.Mutex).Lock"
  "(*math/rand.lockedSource).Uint64" -> "(*math/rand.rngSource).Uint64"
  "(*math/rand.lockedSource).Uint64" -> "(*sync.Mutex).Unlock"
  "(*internal/poll.FD).SetBlocking" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetBlocking" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetBlocking" -> "sync/atomic.StoreUint32"
  "(*internal/poll.FD).SetBlocking" -> "syscall.SetNonblock"
  "(*bufio.Reader).ReadLine" -> "(*bufio.Reader).ReadSlice"
  "(*strings.Builder).WriteRune" -> "(*strings.Builder).copyCheck"
  "(*strings.Builder).WriteRune" -> "(*strings.Builder).grow"
  "(*strings.Builder).WriteRune" -> "unicode/utf8.EncodeRune"
  "(*sync/atomic.Int32).Swap" -> "sync/atomic.SwapInt32"
  "(*io.pipe).closeRead" -> "(*io.onceError).Store"
  "(*io.pipe).closeRead" -> "(*sync.Once).Do"
  "(*context.cancelCtx).Done" -> "(*sync/atomic.Value).Load"
  "(*context.cancelCtx).Done" -> "(*sync.Mutex).Lock"
  "(*context.cancelCtx).Done" -> "(*sync.Mutex).Unlock"
  "(*context.cancelCtx).Done" -> "(*sync/atomic.Value).Load"
  "(*context.cancelCtx).Done" -> "(*sync/atomic.Value).Store"
  "(*os.Process).wait" -> "(*os.Process).blockUntilWaitable"
  "(*os.Process).setDone" -> "sync/atomic.StoreUint32"
  "(*os.Process).wait" -> "(*os.Process).setDone"
  "(*os.Process).wait" -> "(*sync.RWMutex).Lock"
  "(*os.Process).wait" -> "(*sync.RWMutex).Unlock"
  "(*os.Process).wait" -> "syscall.Wait4"
  "(*os.Process).wait" -> "os.NewSyscallError"
  "(*os.Process).wait" -> "(*os.Process).setDone"
  "(unicode.SpecialCase).ToUpper" -> "unicode.to"
  "unicode.ToUpper" -> "unicode.To"
  "(unicode.SpecialCase).ToUpper" -> "unicode.ToUpper"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.runtime_procPin"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).CompareAndSwap" -> "sync/atomic.CompareAndSwapPointer"
  "syscall.Sendto" -> "syscall.sendto"
  "(*flag.FlagSet).Uint" -> "(*flag.FlagSet).UintVar"
  "(*runtime/internal/atomic.Uintptr).Swap" -> "runtime/internal/atomic.Xchguintptr"
  "(*time.Timer).Stop" -> "time.stopTimer"
  "(*flag.FlagSet).Float64" -> "(*flag.FlagSet).Float64Var"
  "(*sync/atomic.Bool).Swap" -> "sync/atomic.b32"
  "(*sync/atomic.Bool).Swap" -> "sync/atomic.SwapUint32"
  "(*math/rand.lockedSource).Seed" -> "(*sync.Mutex).Lock"
  "(*math/rand.lockedSource).Seed" -> "(*math/rand.rngSource).Seed"
  "(*math/rand.lockedSource).Seed" -> "(*sync.Mutex).Unlock"
  "runtime/pprof.countGoroutine" -> "runtime.NumGoroutine"
  "(*compress/flate.decompressor).Read" -> "(*compress/flate.dictDecoder).readFlush"
  "(*bytes.Buffer).UnreadRune" -> "errors.New"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).ReadString" -> "(*bufio.Reader).collectFragments"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).Grow"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).Write"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).Write"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).String"
  "(*bytes.Reader).UnreadByte" -> "errors.New"
  "(*sync/atomic.Uint32).CompareAndSwap" -> "sync/atomic.CompareAndSwapUint32"
  "(*strings.Builder).WriteByte" -> "(*strings.Builder).copyCheck"
  "(time.Time).GoString" -> "(time.Time).Year"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "(time.Time).Month"
  "(time.Time).GoString" -> "(time.Time).Month"
  "(time.Time).GoString" -> "(time.Month).String"
  "(time.Time).GoString" -> "(time.Time).Day"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).Hour" -> "(time.Time).abs"
  "(time.Time).GoString" -> "(time.Time).Hour"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "(time.Time).Minute"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).Second" -> "(time.Time).abs"
  "(time.Time).GoString" -> "(time.Time).Second"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "(time.Time).Nanosecond"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "(time.Time).Location"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "time.quote"
  "(*runtime/internal/atomic.Int32).CompareAndSwap" -> "runtime/internal/atomic.Casint32"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Reset"
  "(*os.Process).Wait" -> "(*os.Process).wait"
  "(sort.StringSlice).Search" -> "sort.SearchStrings"
  "(*log.Logger).Println" -> "sync/atomic.LoadInt32"
  "(*log.Logger).Println" -> "fmt.Sprintln"
  "(*log.Logger).Println" -> "(*log.Logger).Output"
  "(syscall.WaitStatus).CoreDump" -> "(syscall.WaitStatus).Signaled"
  "context.parentCancelCtx" -> "(*sync/atomic.Value).Load"
  "context.removeChild" -> "context.parentCancelCtx"
  "context.removeChild" -> "(*sync.Mutex).Lock"
  "context.removeChild" -> "(*sync.Mutex).Unlock"
  "(*os.File).Chmod" -> "(*os.File).chmod"
  "(*sync.Map).LoadOrStore" -> "(*sync/atomic.Value).Load"
  "(*sync.entry).tryLoadOrStore" -> "sync/atomic.LoadPointer"
  "(*sync.entry).tryLoadOrStore" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync.entry).tryLoadOrStore" -> "sync/atomic.LoadPointer"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).tryLoadOrStore"
  "(*sync.Map).LoadOrStore" -> "(*sync.Mutex).Lock"
  "(*sync.Map).LoadOrStore" -> "(*sync/atomic.Value).Load"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).unexpungeLocked"
  "(*sync.Map).LoadOrStore" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).tryLoadOrStore"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).tryLoadOrStore"
  "(*sync.Map).LoadOrStore" -> "(*sync.Map).missLocked"
  "(*sync.Map).LoadOrStore" -> "(*sync.Map).dirtyLocked"
  "(*sync.Map).LoadOrStore" -> "(*sync/atomic.Value).Store"
  "(*sync.Map).LoadOrStore" -> "sync.newEntry"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteToInet4" -> "internal/syscall/unix.SendtoInet4"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.pollDesc).pollable"
  "syscall.SetsockoptIPv6Mreq" -> "syscall.setsockopt"
  "(*sync/atomic.Uint64).Load" -> "sync/atomic.LoadUint64"
  "(syscall.Signal).String" -> "internal/itoa.Itoa"
  "(compress/flate.CorruptInputError).Error" -> "strconv.FormatInt"
  "(os.dirFS).Open" -> "io/fs.ValidPath"
  "(os.dirFS).Open" -> "os.Open"
  "(os.dirFS).Open" -> "os.containsAny"
  "(*runtime/internal/atomic.Uint64).StoreRelease" -> "runtime/internal/atomic.StoreRel64"
  "(*math/rand.Rand).Read" -> "(*math/rand.lockedSource).read"
  "(*math/rand.Rand).Read" -> "math/rand.read"
  "(*sync.rlocker).Unlock" -> "(*sync.RWMutex).RUnlock"
  "(*strings.Reader).UnreadRune" -> "errors.New"
  "(*strings.Reader).UnreadRune" -> "errors.New"
  "(*sync.Cond).Wait" -> "(*sync.copyChecker).check"
  "(*sync.Cond).Wait" -> "sync.runtime_notifyListAdd"
  "(*sync.Cond).Wait" -> "sync.runtime_notifyListWait"
  "(*runtime/internal/atomic.UnsafePointer).Load" -> "runtime/internal/atomic.Loadp"
  "(*sync/atomic.Uintptr).Store" -> "sync/atomic.StoreUintptr"
  "(*os.File).Chown" -> "(*os.File).checkValid"
  "(*os.File).Chown" -> "(*internal/poll.FD).Fchown"
  "(*os.File).Chown" -> "(*os.File).wrapErr"
  "(*io/fs.subFS).ReadFile" -> "(*io/fs.subFS).fullName"
  "(*io/fs.subFS).ReadFile" -> "io/fs.ReadFile"
  "(*io/fs.subFS).ReadFile" -> "(*io/fs.subFS).fixErr"
  "(time.Time).Weekday" -> "(time.Time).abs"
  "(time.Time).Weekday" -> "time.absWeekday"
  "(unicode.SpecialCase).ToTitle" -> "unicode.to"
  "unicode.ToTitle" -> "unicode.To"
  "(unicode.SpecialCase).ToTitle" -> "unicode.ToTitle"
  "(*internal/poll.FD).SetsockoptIPv6Mreq" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptIPv6Mreq" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptIPv6Mreq" -> "syscall.SetsockoptIPv6Mreq"
  "(*fmt.ss).free" -> "(*sync.Pool).Put"
  "(*runtime/internal/atomic.Uint32).And" -> "runtime/internal/atomic.And"
  "(time.Time).Format" -> "(time.Time).AppendFormat"
  "(internal/reflectlite.Value).IsNil" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).IsNil" -> "(internal/reflectlite.flag).kind"
  "(*runtime/internal/atomic.Uint64).Swap" -> "runtime/internal/atomic.Xchg64"
  "(*bytes.Buffer).Grow" -> "(*bytes.Buffer).grow"
  "(*os.ProcessState).ExitCode" -> "(syscall.WaitStatus).ExitStatus"
  "(*strings.Replacer).WriteString" -> "(*sync.Once).Do"
  "(time.Duration).Round" -> "time.lessThanHalf"
  "(time.Duration).Round" -> "time.lessThanHalf"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Flush"
  "(*internal/poll.FD).SetDeadline" -> "internal/poll.setDeadlineImpl"
  "(*os.File).SetWriteDeadline" -> "(*os.File).setWriteDeadline"
  "(*math/rand.Rand).ExpFloat64" -> "(*math/rand.Rand).Uint32"
  "(*math/rand.Rand).ExpFloat64" -> "(*math/rand.Rand).Float64"
  "(*math/rand.Rand).ExpFloat64" -> "math.Log"
  "(*math/rand.Rand).ExpFloat64" -> "(*math/rand.Rand).Float64"
  "(*math/rand.Rand).ExpFloat64" -> "math.Exp"
  "(*runtime/internal/atomic.Uint32).CompareAndSwap" -> "runtime/internal/atomic.Cas"
  "(*sync.rlocker).Lock" -> "(*sync.RWMutex).RLock"
  "(internal/reflectlite.Value).assignTo" -> "internal/reflectlite.directlyAssignable"
  "(internal/reflectlite.Value).assignTo" -> "(internal/reflectlite.flag).ro"
  "(internal/reflectlite.Value).assignTo" -> "(*internal/reflectlite.rtype).Kind"
  "(internal/reflectlite.Value).assignTo" -> "internal/reflectlite.implements"
  "(internal/reflectlite.Value).assignTo" -> "(*internal/reflectlite.rtype).String"
  "(internal/reflectlite.Value).assignTo" -> "(*internal/reflectlite.rtype).String"
  "(internal/reflectlite.Value).assignTo" -> "internal/reflectlite.unsafe_New"
  "(internal/reflectlite.Value).assignTo" -> "(internal/reflectlite.Value).Kind"
  "(internal/reflectlite.Value).assignTo" -> "internal/reflectlite.valueInterface"
  "(internal/reflectlite.Value).assignTo" -> "(*internal/reflectlite.rtype).NumMethod"
  "(internal/reflectlite.Value).assignTo" -> "(internal/reflectlite.Value).IsNil"
  "(internal/reflectlite.Value).assignTo" -> "internal/reflectlite.ifaceE2I"
  "(*os.File).setDeadline" -> "(*os.File).checkValid"
  "(*os.File).setDeadline" -> "(*internal/poll.FD).SetDeadline"
  "(*os.File).SetDeadline" -> "(*os.File).setDeadline"
  "(*runtime/internal/atomic.Uintptr).LoadAcquire" -> "runtime/internal/atomic.LoadAcquintptr"
  "(*math/rand.Rand).Float32" -> "(*math/rand.Rand).Float64"
  "(*runtime/internal/atomic.Uintptr).CompareAndSwap" -> "runtime/internal/atomic.Casuintptr"
  "(*strings.singleStringReplacer).WriteString" -> "strings.getStringWriter"
  "(*strings.stringFinder).next" -> "strings.max"
  "(*strings.singleStringReplacer).WriteString" -> "(*strings.stringFinder).next"
  "(*strings.singleStringReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.singleStringReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*strings.singleStringReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.singleStringReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*strings.singleStringReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.singleStringReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*os.ProcessState).Sys" -> "(*os.ProcessState).sys"
  "(*os.ProcessState).String" -> "(*os.ProcessState).Sys"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).Exited"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).CoreDump"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).ExitStatus"
  "(syscall.WaitStatus).Signal" -> "(syscall.WaitStatus).Signaled"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).Signal"
  "(*os.ProcessState).String" -> "(syscall.Signal).String"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).Signaled"
  "(*os.ProcessState).String" -> "os.uitox"
  "(*os.ProcessState).String" -> "internal/itoa.Itoa"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).StopSignal"
  "(*os.ProcessState).String" -> "(syscall.Signal).String"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).StopSignal"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).Stopped"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).Continued"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).TrapCause"
  "(*os.ProcessState).String" -> "internal/itoa.Itoa"
  "(*os.ProcessState).String" -> "(syscall.WaitStatus).TrapCause"
  "(time.Time).AddDate" -> "(time.Time).Date"
  "(time.Time).AddDate" -> "(time.Time).Clock"
  "(time.Time).AddDate" -> "(*time.Time).nsec"
  "(time.Time).AddDate" -> "(time.Time).Location"
  "(time.Time).AddDate" -> "time.Date"
  "runtime/pprof.writeAlloc" -> "runtime/pprof.writeHeapInternal"
  "(*bytes.Buffer).ReadBytes" -> "(*bytes.Buffer).readSlice"
  "(*strings.genericReplacer).WriteString" -> "strings.getStringWriter"
  "(*strings.genericReplacer).WriteString" -> "(*strings.genericReplacer).lookup"
  "(*strings.genericReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.genericReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*strings.genericReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.genericReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*strings.genericReplacer).WriteString" -> "(*strings.appendSliceWriter).WriteString"
  "(*strings.genericReplacer).WriteString" -> "(strings.stringWriter).WriteString"
  "(*strings.genericReplacer).Replace" -> "(*strings.genericReplacer).WriteString"
  "(*io/fs.subFS).Open" -> "(*io/fs.subFS).fullName"
  "(*io/fs.subFS).Open" -> "(*io/fs.subFS).fixErr"
  "(*internal/poll.FD).Dup" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Dup" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Dup" -> "internal/poll.DupCloseOnExec"
  "(*os.File).Truncate" -> "(*os.File).checkValid"
  "(*os.File).Truncate" -> "(*internal/poll.FD).Ftruncate"
  "(*os.File).Truncate" -> "(*os.File).wrapErr"
  "(*internal/poll.FD).WriteOnce" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteOnce" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteOnce" -> "internal/poll.ignoringEINTRIO"
  "(*runtime/internal/atomic.Uint8).And" -> "runtime/internal/atomic.And8"
  "syscall.mmap" -> "syscall.Syscall6"
  "syscall.mmap" -> "syscall.errnoErr"
  "(*os.unixDirent).Info" -> "os.Lstat"
  "(time.Time).Round" -> "(*time.Time).stripMono"
  "(time.Time).Round" -> "time.div"
  "(time.Time).Round" -> "time.lessThanHalf"
  "(time.Time).Round" -> "(time.Time).Add"
  "(time.Time).Round" -> "(time.Time).Add"
  "(*flag.FlagSet).TextVar" -> "flag.newTextValue"
  "(*flag.FlagSet).TextVar" -> "(*flag.FlagSet).Var"
  "(*sync/atomic.Int32).Store" -> "sync/atomic.StoreInt32"
  "(*sync/atomic.Uint32).Swap" -> "sync/atomic.SwapUint32"
  "(*bytes.Buffer).ReadRune" -> "(*bytes.Buffer).empty"
  "(*bytes.Buffer).ReadRune" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*context.cancelCtx).cancel" -> "(*sync.Mutex).Lock"
  "(*context.cancelCtx).cancel" -> "(*sync.Mutex).Unlock"
  "(*context.cancelCtx).cancel" -> "(*sync/atomic.Value).Load"
  "(*context.cancelCtx).cancel" -> "(*sync/atomic.Value).Store"
  "(*context.cancelCtx).cancel" -> "(*sync.Mutex).Unlock"
  "(*context.cancelCtx).cancel" -> "context.removeChild"
  "(*context.timerCtx).cancel" -> "(*context.cancelCtx).cancel"
  "(*context.timerCtx).cancel" -> "context.removeChild"
  "(*context.timerCtx).cancel" -> "(*sync.Mutex).Lock"
  "(*context.timerCtx).cancel" -> "(*time.Timer).Stop"
  "(*context.timerCtx).cancel" -> "(*sync.Mutex).Unlock"
  "(*io.PipeReader).CloseWithError" -> "(*io.pipe).closeRead"
  "(*io.PipeReader).Close" -> "(*io.PipeReader).CloseWithError"
  "(*internal/reflectlite.rtype).PkgPath" -> "(*internal/reflectlite.rtype).uncommon"
  "(*internal/reflectlite.rtype).PkgPath" -> "(*internal/reflectlite.rtype).nameOff"
  "(*internal/reflectlite.rtype).PkgPath" -> "(internal/reflectlite.name).name"
  "(*log.Logger).Writer" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Writer" -> "(*sync.Mutex).Unlock"
  "(*sync/atomic.Bool).Store" -> "sync/atomic.b32"
  "(*sync/atomic.Bool).Store" -> "sync/atomic.StoreUint32"
  "(*compress/gzip.Writer).Reset" -> "(*compress/gzip.Writer).init"
  "(*internal/reflectlite.rtype).NumField" -> "(*internal/reflectlite.rtype).Kind"
  "(io/fs.dirInfo).Type" -> "(io/fs.FileMode).Type"
  "(*log.Logger).Panic" -> "fmt.Sprint"
  "(*log.Logger).Panic" -> "(*log.Logger).Output"
  "(internal/reflectlite.Value).Set" -> "(internal/reflectlite.flag).mustBeAssignable"
  "(internal/reflectlite.Value).Set" -> "(internal/reflectlite.flag).mustBeExported"
  "(internal/reflectlite.Value).Set" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).Set" -> "(internal/reflectlite.Value).assignTo"
  "(internal/reflectlite.Value).Set" -> "internal/reflectlite.typedmemmove"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadMsg" -> "syscall.Recvmsg"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.pollDesc).pollable"
  "(*sync.WaitGroup).Wait" -> "(*sync.WaitGroup).state"
  "(*sync.WaitGroup).Wait" -> "internal/race.Disable"
  "(*sync.WaitGroup).Wait" -> "sync/atomic.LoadUint64"
  "(*sync.WaitGroup).Wait" -> "sync/atomic.CompareAndSwapUint64"
  "(*sync.WaitGroup).Wait" -> "internal/race.Enable"
  "(*sync.WaitGroup).Wait" -> "internal/race.Acquire"
  "(*sync.WaitGroup).Wait" -> "internal/race.Write"
  "(*sync.WaitGroup).Wait" -> "sync.runtime_Semacquire"
  "(*sync.WaitGroup).Wait" -> "internal/race.Enable"
  "(*sync.WaitGroup).Wait" -> "internal/race.Acquire"
  "(*fmt.ss).Token" -> "(*fmt.ss).Token$1"
  "(*fmt.ss).Token" -> "(*fmt.ss).token"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Flush"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Flush"
  "(*log.Logger).Panicf" -> "fmt.Sprintf"
  "(*log.Logger).Panicf" -> "(*log.Logger).Output"
  "(*compress/flate.ReadError).Error" -> "strconv.FormatInt"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteTo" -> "syscall.Sendto"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.pollDesc).pollable"
  "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB" -> "runtime/internal/atomic.Casp1"
  "(io.discard).ReadFrom" -> "(*sync.Pool).Get"
  "(io.discard).ReadFrom" -> "(*sync.Pool).Put"
  "(*hash/crc32.digest).MarshalBinary" -> "hash/crc32.tableSum"
  "(*hash/crc32.digest).MarshalBinary" -> "hash/crc32.appendUint32"
  "(*hash/crc32.digest).MarshalBinary" -> "hash/crc32.appendUint32"
  "(*os.File).Readdir" -> "(*os.File).readdir"
  "(*bufio.Reader).Reset" -> "(*bufio.Reader).reset"
  "(*context.timerCtx).String" -> "context.contextName"
  "(time.Time).String" -> "(time.Time).Format"
  "(time.Time).String" -> "time.appendInt"
  "(time.Time).String" -> "time.appendInt"
  "(time.Time).String" -> "time.appendInt"
  "(*context.timerCtx).String" -> "(time.Time).String"
  "(*context.timerCtx).String" -> "time.Until"
  "(*context.timerCtx).String" -> "(time.Duration).String"
  "(*math/rand.Zipf).h" -> "math.Log"
  "(*math/rand.Zipf).h" -> "math.Exp"
  "runtime/pprof.writeGoroutine" -> "runtime/pprof.writeGoroutineStacks"
  "runtime/pprof.writeGoroutine" -> "runtime/pprof.writeRuntimeProfile"
  "(*sync/atomic.Int32).Add" -> "sync/atomic.AddInt32"
  "(time.Time).MarshalText" -> "(time.Time).Year"
  "(time.Time).MarshalText" -> "errors.New"
  "(time.Time).MarshalText" -> "(time.Time).AppendFormat"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).writeBuf"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).writeBuf"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).readErr"
  "(*sync/atomic.Uintptr).CompareAndSwap" -> "sync/atomic.CompareAndSwapUintptr"
  "(*bufio.Reader).Peek" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).Peek" -> "(*bufio.Reader).readErr"
  "(sort.Float64Slice).Sort" -> "sort.Sort"
  "(*runtime/internal/atomic.Uint64).CompareAndSwap" -> "runtime/internal/atomic.Cas64"
  "(*os.File).Readdirnames" -> "(*os.File).readdir"
  "(*runtime/internal/atomic.Int64).Swap" -> "runtime/internal/atomic.Xchgint64"
  "(*sync/atomic.Uint32).Add" -> "sync/atomic.AddUint32"
  "(*runtime/internal/atomic.Uint32).Or" -> "runtime/internal/atomic.Or"
  "(*runtime/internal/atomic.Int32).Swap" -> "runtime/internal/atomic.Xchgint32"
  "(*os.File).SetReadDeadline" -> "(*os.File).setReadDeadline"
  "(*runtime/internal/atomic.Bool).Store" -> "(*runtime/internal/atomic.Uint8).Store"
  "(*bytes.Reader).UnreadRune" -> "errors.New"
  "(*bytes.Reader).UnreadRune" -> "errors.New"
  "(*math/rand.Zipf).Uint64" -> "(*math/rand.Rand).Float64"
  "(*math/rand.Zipf).Uint64" -> "(*math/rand.Zipf).hinv"
  "(*math/rand.Zipf).Uint64" -> "math.Floor"
  "(*math/rand.Zipf).Uint64" -> "(*math/rand.Zipf).h"
  "(*math/rand.Zipf).Uint64" -> "math.Log"
  "(*math/rand.Zipf).Uint64" -> "math.Exp"
  "(*bytes.Reader).Seek" -> "errors.New"
  "(*bytes.Reader).Seek" -> "errors.New"
  "(*os.rawConn).Read" -> "(*os.File).checkValid"
  "(*os.rawConn).Read" -> "(*internal/poll.FD).RawRead"
  "(*os.rawConn).Read" -> "runtime.KeepAlive"
  "(*internal/poll.FD).SetsockoptByte" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptByte" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptByte" -> "syscall.SetsockoptByte"
  "(*os.File).Fd" -> "(*internal/poll.FD).SetBlocking"
  "runtime/pprof.writeMutex" -> "runtime/pprof.writeProfileInternal"
  "(*os.Process).Kill" -> "(*os.Process).kill"
  "(*fmt.ss).doScan" -> "fmt.errorHandler"
  "(*fmt.ss).doScan" -> "(*fmt.ss).scanOne"
  "(*fmt.ss).doScan" -> "(*fmt.ss).getRune"
  "(*fmt.ss).doScan" -> "fmt.isSpace"
  "(*fmt.ss).doScan" -> "(*fmt.ss).errorString"
  "(time.Time).MarshalJSON" -> "(time.Time).Year"
  "(time.Time).MarshalJSON" -> "errors.New"
  "(time.Time).MarshalJSON" -> "(time.Time).AppendFormat"
  "(*os.Process).Release" -> "(*os.Process).release"
  "(*math/rand.Rand).Shuffle" -> "(*math/rand.Rand).Int63n"
  "(*math/rand.Rand).Shuffle" -> "(*math/rand.Rand).int31n"
  "(*sync.Cond).Signal" -> "(*sync.copyChecker).check"
  "(*sync.Cond).Signal" -> "sync.runtime_notifyListNotifyOne"
  "(*fmt.pp).Write" -> "(*fmt.buffer).write"
  "(*internal/poll.FD).WaitWrite" -> "(*internal/poll.pollDesc).waitWrite"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).readErr"
  "(*runtime/pprof.Profile).Remove" -> "(*sync.Mutex).Lock"
  "(*runtime/pprof.Profile).Remove" -> "(*sync.Mutex).Unlock"
  "(*runtime/internal/atomic.Uint64).Store" -> "runtime/internal/atomic.Store64"
  "(*io/fs.subFS).ReadDir" -> "(*io/fs.subFS).fullName"
  "(*io/fs.subFS).ReadDir" -> "io/fs.ReadDir"
  "(*io/fs.subFS).ReadDir" -> "(*io/fs.subFS).fixErr"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).WriteByte"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).Flush"
  "(*bufio.Writer).WriteRune" -> "unicode/utf8.EncodeRune"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).WriteString"
  "(*log.Logger).SetOutput" -> "(*sync.Mutex).Lock"
  "(*log.Logger).SetOutput" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).SetOutput" -> "sync/atomic.StoreInt32"
  "(*os.ProcessState).Success" -> "(*os.ProcessState).success"
  "(*strings.byteStringReplacer).Replace" -> "strings.Count"
  "(*runtime/internal/atomic.Float64).Store" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*internal/poll.FD).SetsockoptIPMreq" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptIPMreq" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptIPMreq" -> "syscall.SetsockoptIPMreq"
  "(*runtime/internal/atomic.UnsafePointer).StoreNoWB" -> "runtime/internal/atomic.StorepNoWB"
  "(sort.Float64Slice).Search" -> "sort.SearchFloat64s"
  "(*syscall.Cmsghdr).data" -> "syscall.cmsgAlignOf"
  "(*bytes.Reader).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*io.pipe).write" -> "(*io.pipe).writeCloseError"
  "(*io.pipe).write" -> "(*sync.Mutex).Lock"
  "(*io.pipe).write" -> "(*sync.Mutex).Unlock"
  "(*io.pipe).write" -> "(*io.pipe).writeCloseError"
  "(*flag.FlagSet).Func" -> "(*flag.FlagSet).Var"
  "(*strings.singleStringReplacer).Replace" -> "(*strings.stringFinder).next"
  "(*strings.singleStringReplacer).Replace" -> "(*strings.Builder).Grow"
  "(*strings.singleStringReplacer).Replace" -> "(*strings.Builder).WriteString"
  "(*strings.singleStringReplacer).Replace" -> "(*strings.Builder).WriteString"
  "(*strings.singleStringReplacer).Replace" -> "(*strings.Builder).WriteString"
  "(*strings.singleStringReplacer).Replace" -> "(*strings.Builder).String"
  "(*runtime/internal/atomic.Uint32).LoadAcquire" -> "runtime/internal/atomic.LoadAcq"
  "(*runtime/internal/atomic.Uintptr).Store" -> "runtime/internal/atomic.Storeuintptr"
  "(*io.PipeWriter).Write" -> "(*io.pipe).write"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).Accept" -> "internal/poll.accept"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.pollDesc).pollable"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.pollDesc).waitRead"
  "(*bytes.Buffer).Next" -> "(*bytes.Buffer).Len"
  "(*compress/gzip.Writer).Flush" -> "(*compress/gzip.Writer).Write"
  "(*compress/gzip.Writer).Flush" -> "(*compress/flate.Writer).Flush"
  "(*time.Time).UnmarshalJSON" -> "time.Parse"
  "runtime/pprof.writeBlock" -> "runtime/pprof.writeProfileInternal"
  "(*strings.Reader).UnreadByte" -> "errors.New"
  "(*context.valueCtx).String" -> "context.contextName"
  "(*context.valueCtx).String" -> "internal/reflectlite.TypeOf"
  "(*context.valueCtx).String" -> "context.stringify"
  "(*context.valueCtx).String" -> "(*internal/reflectlite.rtype).String"
  "(*sync.RWMutex).TryLock" -> "internal/race.Disable"
  "(*sync.RWMutex).TryLock" -> "(*sync.Mutex).TryLock"
  "(*sync.RWMutex).TryLock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.RWMutex).TryLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryLock" -> "(*sync.Mutex).Unlock"
  "(*sync.RWMutex).TryLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryLock" -> "internal/race.Acquire"
  "(*sync.RWMutex).TryLock" -> "internal/race.Acquire"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "runtime/pprof.writeThreadCreate" -> "runtime/pprof.writeRuntimeProfile"
}
